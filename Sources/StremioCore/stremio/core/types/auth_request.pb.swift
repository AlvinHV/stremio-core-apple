// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stremio/core/types/auth_request.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Stremio_Core_Types_AuthRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Stremio_Core_Types_AuthRequest.OneOf_Type? = nil

  public var login: Stremio_Core_Types_AuthRequest.Login {
    get {
      if case .login(let v)? = type {return v}
      return Stremio_Core_Types_AuthRequest.Login()
    }
    set {type = .login(newValue)}
  }

  public var loginWithToken: Stremio_Core_Types_AuthRequest.LoginWithToken {
    get {
      if case .loginWithToken(let v)? = type {return v}
      return Stremio_Core_Types_AuthRequest.LoginWithToken()
    }
    set {type = .loginWithToken(newValue)}
  }

  public var facebook: Stremio_Core_Types_AuthRequest.Facebook {
    get {
      if case .facebook(let v)? = type {return v}
      return Stremio_Core_Types_AuthRequest.Facebook()
    }
    set {type = .facebook(newValue)}
  }

  public var register: Stremio_Core_Types_AuthRequest.Register {
    get {
      if case .register(let v)? = type {return v}
      return Stremio_Core_Types_AuthRequest.Register()
    }
    set {type = .register(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    case login(Stremio_Core_Types_AuthRequest.Login)
    case loginWithToken(Stremio_Core_Types_AuthRequest.LoginWithToken)
    case facebook(Stremio_Core_Types_AuthRequest.Facebook)
    case register(Stremio_Core_Types_AuthRequest.Register)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .login: return {
        guard case .login(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .loginWithToken: return {
        guard case .loginWithToken(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .facebook: return {
        guard case .facebook(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .register: return {
        guard case .register(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      }
    }

  #if !swift(>=4.1)
    public static func ==(lhs: Stremio_Core_Types_AuthRequest.OneOf_Type, rhs: Stremio_Core_Types_AuthRequest.OneOf_Type) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.login, .login): return {
        guard case .login(let l) = lhs, case .login(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.loginWithToken, .loginWithToken): return {
        guard case .loginWithToken(let l) = lhs, case .loginWithToken(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.facebook, .facebook): return {
        guard case .facebook(let l) = lhs, case .facebook(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.register, .register): return {
        guard case .register(let l) = lhs, case .register(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct Login {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var email: String {
      get {return _email ?? String()}
      set {_email = newValue}
    }
    /// Returns true if `email` has been explicitly set.
    public var hasEmail: Bool {return self._email != nil}
    /// Clears the value of `email`. Subsequent reads from it will return its default value.
    public mutating func clearEmail() {self._email = nil}

    public var password: String {
      get {return _password ?? String()}
      set {_password = newValue}
    }
    /// Returns true if `password` has been explicitly set.
    public var hasPassword: Bool {return self._password != nil}
    /// Clears the value of `password`. Subsequent reads from it will return its default value.
    public mutating func clearPassword() {self._password = nil}

    public var facebook: Bool {
      get {return _facebook ?? false}
      set {_facebook = newValue}
    }
    /// Returns true if `facebook` has been explicitly set.
    public var hasFacebook: Bool {return self._facebook != nil}
    /// Clears the value of `facebook`. Subsequent reads from it will return its default value.
    public mutating func clearFacebook() {self._facebook = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _email: String? = nil
    fileprivate var _password: String? = nil
    fileprivate var _facebook: Bool? = nil
  }

  public struct LoginWithToken {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var token: String {
      get {return _token ?? String()}
      set {_token = newValue}
    }
    /// Returns true if `token` has been explicitly set.
    public var hasToken: Bool {return self._token != nil}
    /// Clears the value of `token`. Subsequent reads from it will return its default value.
    public mutating func clearToken() {self._token = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _token: String? = nil
  }

  public struct Facebook {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var token: String {
      get {return _token ?? String()}
      set {_token = newValue}
    }
    /// Returns true if `token` has been explicitly set.
    public var hasToken: Bool {return self._token != nil}
    /// Clears the value of `token`. Subsequent reads from it will return its default value.
    public mutating func clearToken() {self._token = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _token: String? = nil
  }

  public struct Register {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var email: String {
      get {return _email ?? String()}
      set {_email = newValue}
    }
    /// Returns true if `email` has been explicitly set.
    public var hasEmail: Bool {return self._email != nil}
    /// Clears the value of `email`. Subsequent reads from it will return its default value.
    public mutating func clearEmail() {self._email = nil}

    public var password: String {
      get {return _password ?? String()}
      set {_password = newValue}
    }
    /// Returns true if `password` has been explicitly set.
    public var hasPassword: Bool {return self._password != nil}
    /// Clears the value of `password`. Subsequent reads from it will return its default value.
    public mutating func clearPassword() {self._password = nil}

    public var gdprConsent: Stremio_Core_Types_GDPRConsent {
      get {return _gdprConsent ?? Stremio_Core_Types_GDPRConsent()}
      set {_gdprConsent = newValue}
    }
    /// Returns true if `gdprConsent` has been explicitly set.
    public var hasGdprConsent: Bool {return self._gdprConsent != nil}
    /// Clears the value of `gdprConsent`. Subsequent reads from it will return its default value.
    public mutating func clearGdprConsent() {self._gdprConsent = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _email: String? = nil
    fileprivate var _password: String? = nil
    fileprivate var _gdprConsent: Stremio_Core_Types_GDPRConsent? = nil
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stremio_Core_Types_AuthRequest: @unchecked Sendable {}
extension Stremio_Core_Types_AuthRequest.OneOf_Type: @unchecked Sendable {}
extension Stremio_Core_Types_AuthRequest.Login: @unchecked Sendable {}
extension Stremio_Core_Types_AuthRequest.LoginWithToken: @unchecked Sendable {}
extension Stremio_Core_Types_AuthRequest.Facebook: @unchecked Sendable {}
extension Stremio_Core_Types_AuthRequest.Register: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stremio.core.types"

extension Stremio_Core_Types_AuthRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "login"),
    2: .standard(proto: "login_with_token"),
    3: .same(proto: "facebook"),
    4: .same(proto: "register"),
  ]

  public var isInitialized: Bool {
    if let v = self.type, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Stremio_Core_Types_AuthRequest.Login?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .login(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .login(v)
        }
      }()
      case 2: try {
        var v: Stremio_Core_Types_AuthRequest.LoginWithToken?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .loginWithToken(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .loginWithToken(v)
        }
      }()
      case 3: try {
        var v: Stremio_Core_Types_AuthRequest.Facebook?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .facebook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .facebook(v)
        }
      }()
      case 4: try {
        var v: Stremio_Core_Types_AuthRequest.Register?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .register(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .register(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.type {
    case .login?: try {
      guard case .login(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .loginWithToken?: try {
      guard case .loginWithToken(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .facebook?: try {
      guard case .facebook(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .register?: try {
      guard case .register(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_AuthRequest, rhs: Stremio_Core_Types_AuthRequest) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_AuthRequest.Login: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_AuthRequest.protoMessageName + ".Login"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
    2: .same(proto: "password"),
    3: .same(proto: "facebook"),
  ]

  public var isInitialized: Bool {
    if self._email == nil {return false}
    if self._password == nil {return false}
    if self._facebook == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._email) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._password) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._facebook) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._email {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._password {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._facebook {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_AuthRequest.Login, rhs: Stremio_Core_Types_AuthRequest.Login) -> Bool {
    if lhs._email != rhs._email {return false}
    if lhs._password != rhs._password {return false}
    if lhs._facebook != rhs._facebook {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_AuthRequest.LoginWithToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_AuthRequest.protoMessageName + ".LoginWithToken"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  public var isInitialized: Bool {
    if self._token == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._token) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_AuthRequest.LoginWithToken, rhs: Stremio_Core_Types_AuthRequest.LoginWithToken) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_AuthRequest.Facebook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_AuthRequest.protoMessageName + ".Facebook"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  public var isInitialized: Bool {
    if self._token == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._token) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_AuthRequest.Facebook, rhs: Stremio_Core_Types_AuthRequest.Facebook) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_AuthRequest.Register: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_AuthRequest.protoMessageName + ".Register"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
    2: .same(proto: "password"),
    3: .standard(proto: "gdpr_consent"),
  ]

  public var isInitialized: Bool {
    if self._email == nil {return false}
    if self._password == nil {return false}
    if self._gdprConsent == nil {return false}
    if let v = self._gdprConsent, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._email) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._password) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._gdprConsent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._email {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._password {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._gdprConsent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_AuthRequest.Register, rhs: Stremio_Core_Types_AuthRequest.Register) -> Bool {
    if lhs._email != rhs._email {return false}
    if lhs._password != rhs._password {return false}
    if lhs._gdprConsent != rhs._gdprConsent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
