// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stremio/core/types/stream.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Stremio_Core_Types_Stream {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var source: OneOf_Source? {
    get {return _storage._source}
    set {_uniqueStorage()._source = newValue}
  }

  public var url: Stremio_Core_Types_Stream.Url {
    get {
      if case .url(let v)? = _storage._source {return v}
      return Stremio_Core_Types_Stream.Url()
    }
    set {_uniqueStorage()._source = .url(newValue)}
  }

  public var youTube: Stremio_Core_Types_Stream.YouTube {
    get {
      if case .youTube(let v)? = _storage._source {return v}
      return Stremio_Core_Types_Stream.YouTube()
    }
    set {_uniqueStorage()._source = .youTube(newValue)}
  }

  public var torrent: Stremio_Core_Types_Stream.Torrent {
    get {
      if case .torrent(let v)? = _storage._source {return v}
      return Stremio_Core_Types_Stream.Torrent()
    }
    set {_uniqueStorage()._source = .torrent(newValue)}
  }

  public var external: Stremio_Core_Types_Stream.External {
    get {
      if case .external(let v)? = _storage._source {return v}
      return Stremio_Core_Types_Stream.External()
    }
    set {_uniqueStorage()._source = .external(newValue)}
  }

  public var playerFrame: Stremio_Core_Types_Stream.PlayerFrame {
    get {
      if case .playerFrame(let v)? = _storage._source {return v}
      return Stremio_Core_Types_Stream.PlayerFrame()
    }
    set {_uniqueStorage()._source = .playerFrame(newValue)}
  }

  public var rar: Stremio_Core_Types_Stream.Rar {
    get {
      if case .rar(let v)? = _storage._source {return v}
      return Stremio_Core_Types_Stream.Rar()
    }
    set {_uniqueStorage()._source = .rar(newValue)}
  }

  public var zip: Stremio_Core_Types_Stream.Zip {
    get {
      if case .zip(let v)? = _storage._source {return v}
      return Stremio_Core_Types_Stream.Zip()
    }
    set {_uniqueStorage()._source = .zip(newValue)}
  }

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_uniqueStorage()._name = nil}

  public var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  public var thumbnail: String {
    get {return _storage._thumbnail ?? String()}
    set {_uniqueStorage()._thumbnail = newValue}
  }
  /// Returns true if `thumbnail` has been explicitly set.
  public var hasThumbnail: Bool {return _storage._thumbnail != nil}
  /// Clears the value of `thumbnail`. Subsequent reads from it will return its default value.
  public mutating func clearThumbnail() {_uniqueStorage()._thumbnail = nil}

  public var subtitles: [Stremio_Core_Types_Subtitle] {
    get {return _storage._subtitles}
    set {_uniqueStorage()._subtitles = newValue}
  }

  public var behaviorHints: Stremio_Core_Types_StreamBehaviorHints {
    get {return _storage._behaviorHints ?? Stremio_Core_Types_StreamBehaviorHints()}
    set {_uniqueStorage()._behaviorHints = newValue}
  }
  /// Returns true if `behaviorHints` has been explicitly set.
  public var hasBehaviorHints: Bool {return _storage._behaviorHints != nil}
  /// Clears the value of `behaviorHints`. Subsequent reads from it will return its default value.
  public mutating func clearBehaviorHints() {_uniqueStorage()._behaviorHints = nil}

  public var deepLinks: Stremio_Core_Types_StreamDeepLinks {
    get {return _storage._deepLinks ?? Stremio_Core_Types_StreamDeepLinks()}
    set {_uniqueStorage()._deepLinks = newValue}
  }
  /// Returns true if `deepLinks` has been explicitly set.
  public var hasDeepLinks: Bool {return _storage._deepLinks != nil}
  /// Clears the value of `deepLinks`. Subsequent reads from it will return its default value.
  public mutating func clearDeepLinks() {_uniqueStorage()._deepLinks = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Source: Equatable {
    case url(Stremio_Core_Types_Stream.Url)
    case youTube(Stremio_Core_Types_Stream.YouTube)
    case torrent(Stremio_Core_Types_Stream.Torrent)
    case external(Stremio_Core_Types_Stream.External)
    case playerFrame(Stremio_Core_Types_Stream.PlayerFrame)
    case rar(Stremio_Core_Types_Stream.Rar)
    case zip(Stremio_Core_Types_Stream.Zip)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .url: return {
        guard case .url(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .youTube: return {
        guard case .youTube(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .torrent: return {
        guard case .torrent(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .playerFrame: return {
        guard case .playerFrame(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      default: return true
      }
    }

  #if !swift(>=4.1)
    public static func ==(lhs: Stremio_Core_Types_Stream.OneOf_Source, rhs: Stremio_Core_Types_Stream.OneOf_Source) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.url, .url): return {
        guard case .url(let l) = lhs, case .url(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.youTube, .youTube): return {
        guard case .youTube(let l) = lhs, case .youTube(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.torrent, .torrent): return {
        guard case .torrent(let l) = lhs, case .torrent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.external, .external): return {
        guard case .external(let l) = lhs, case .external(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.playerFrame, .playerFrame): return {
        guard case .playerFrame(let l) = lhs, case .playerFrame(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.rar, .rar): return {
        guard case .rar(let l) = lhs, case .rar(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.zip, .zip): return {
        guard case .zip(let l) = lhs, case .zip(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct Url {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var url: String {
      get {return _url ?? String()}
      set {_url = newValue}
    }
    /// Returns true if `url` has been explicitly set.
    public var hasURL: Bool {return self._url != nil}
    /// Clears the value of `url`. Subsequent reads from it will return its default value.
    public mutating func clearURL() {self._url = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _url: String? = nil
  }

  public struct YouTube {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var ytID: String {
      get {return _ytID ?? String()}
      set {_ytID = newValue}
    }
    /// Returns true if `ytID` has been explicitly set.
    public var hasYtID: Bool {return self._ytID != nil}
    /// Clears the value of `ytID`. Subsequent reads from it will return its default value.
    public mutating func clearYtID() {self._ytID = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _ytID: String? = nil
  }

  public struct Torrent {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var infoHash: String {
      get {return _infoHash ?? String()}
      set {_infoHash = newValue}
    }
    /// Returns true if `infoHash` has been explicitly set.
    public var hasInfoHash: Bool {return self._infoHash != nil}
    /// Clears the value of `infoHash`. Subsequent reads from it will return its default value.
    public mutating func clearInfoHash() {self._infoHash = nil}

    public var fileIdx: Int32 {
      get {return _fileIdx ?? 0}
      set {_fileIdx = newValue}
    }
    /// Returns true if `fileIdx` has been explicitly set.
    public var hasFileIdx: Bool {return self._fileIdx != nil}
    /// Clears the value of `fileIdx`. Subsequent reads from it will return its default value.
    public mutating func clearFileIdx() {self._fileIdx = nil}

    public var announce: [String] = []

    public var fileMustInclude: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _infoHash: String? = nil
    fileprivate var _fileIdx: Int32? = nil
  }

  public struct External {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var externalURL: String {
      get {return _externalURL ?? String()}
      set {_externalURL = newValue}
    }
    /// Returns true if `externalURL` has been explicitly set.
    public var hasExternalURL: Bool {return self._externalURL != nil}
    /// Clears the value of `externalURL`. Subsequent reads from it will return its default value.
    public mutating func clearExternalURL() {self._externalURL = nil}

    public var androidTvURL: String {
      get {return _androidTvURL ?? String()}
      set {_androidTvURL = newValue}
    }
    /// Returns true if `androidTvURL` has been explicitly set.
    public var hasAndroidTvURL: Bool {return self._androidTvURL != nil}
    /// Clears the value of `androidTvURL`. Subsequent reads from it will return its default value.
    public mutating func clearAndroidTvURL() {self._androidTvURL = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _externalURL: String? = nil
    fileprivate var _androidTvURL: String? = nil
  }

  public struct PlayerFrame {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var playerFrameURL: String {
      get {return _playerFrameURL ?? String()}
      set {_playerFrameURL = newValue}
    }
    /// Returns true if `playerFrameURL` has been explicitly set.
    public var hasPlayerFrameURL: Bool {return self._playerFrameURL != nil}
    /// Clears the value of `playerFrameURL`. Subsequent reads from it will return its default value.
    public mutating func clearPlayerFrameURL() {self._playerFrameURL = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _playerFrameURL: String? = nil
  }

  public struct Rar {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var rarUrls: [String] = []

    public var fileIdx: Int32 {
      get {return _fileIdx ?? 0}
      set {_fileIdx = newValue}
    }
    /// Returns true if `fileIdx` has been explicitly set.
    public var hasFileIdx: Bool {return self._fileIdx != nil}
    /// Clears the value of `fileIdx`. Subsequent reads from it will return its default value.
    public mutating func clearFileIdx() {self._fileIdx = nil}

    public var fileMustInclude: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _fileIdx: Int32? = nil
  }

  public struct Zip {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var zipUrls: [String] = []

    public var fileIdx: Int32 {
      get {return _fileIdx ?? 0}
      set {_fileIdx = newValue}
    }
    /// Returns true if `fileIdx` has been explicitly set.
    public var hasFileIdx: Bool {return self._fileIdx != nil}
    /// Clears the value of `fileIdx`. Subsequent reads from it will return its default value.
    public mutating func clearFileIdx() {self._fileIdx = nil}

    public var fileMustInclude: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _fileIdx: Int32? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Stremio_Core_Types_StreamBehaviorHints {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var notWebReady: Bool {
    get {return _notWebReady ?? false}
    set {_notWebReady = newValue}
  }
  /// Returns true if `notWebReady` has been explicitly set.
  public var hasNotWebReady: Bool {return self._notWebReady != nil}
  /// Clears the value of `notWebReady`. Subsequent reads from it will return its default value.
  public mutating func clearNotWebReady() {self._notWebReady = nil}

  public var bingeGroup: String {
    get {return _bingeGroup ?? String()}
    set {_bingeGroup = newValue}
  }
  /// Returns true if `bingeGroup` has been explicitly set.
  public var hasBingeGroup: Bool {return self._bingeGroup != nil}
  /// Clears the value of `bingeGroup`. Subsequent reads from it will return its default value.
  public mutating func clearBingeGroup() {self._bingeGroup = nil}

  public var countryWhitelist: [String] = []

  public var proxyHeaders: Stremio_Core_Types_StreamProxyHeaders {
    get {return _proxyHeaders ?? Stremio_Core_Types_StreamProxyHeaders()}
    set {_proxyHeaders = newValue}
  }
  /// Returns true if `proxyHeaders` has been explicitly set.
  public var hasProxyHeaders: Bool {return self._proxyHeaders != nil}
  /// Clears the value of `proxyHeaders`. Subsequent reads from it will return its default value.
  public mutating func clearProxyHeaders() {self._proxyHeaders = nil}

  public var filename: String {
    get {return _filename ?? String()}
    set {_filename = newValue}
  }
  /// Returns true if `filename` has been explicitly set.
  public var hasFilename: Bool {return self._filename != nil}
  /// Clears the value of `filename`. Subsequent reads from it will return its default value.
  public mutating func clearFilename() {self._filename = nil}

  public var videoHash: String {
    get {return _videoHash ?? String()}
    set {_videoHash = newValue}
  }
  /// Returns true if `videoHash` has been explicitly set.
  public var hasVideoHash: Bool {return self._videoHash != nil}
  /// Clears the value of `videoHash`. Subsequent reads from it will return its default value.
  public mutating func clearVideoHash() {self._videoHash = nil}

  public var videoSize: UInt64 {
    get {return _videoSize ?? 0}
    set {_videoSize = newValue}
  }
  /// Returns true if `videoSize` has been explicitly set.
  public var hasVideoSize: Bool {return self._videoSize != nil}
  /// Clears the value of `videoSize`. Subsequent reads from it will return its default value.
  public mutating func clearVideoSize() {self._videoSize = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _notWebReady: Bool? = nil
  fileprivate var _bingeGroup: String? = nil
  fileprivate var _proxyHeaders: Stremio_Core_Types_StreamProxyHeaders? = nil
  fileprivate var _filename: String? = nil
  fileprivate var _videoHash: String? = nil
  fileprivate var _videoSize: UInt64? = nil
}

public struct Stremio_Core_Types_StreamProxyHeaders {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var request: Dictionary<String,String> = [:]

  public var response: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Stremio_Core_Types_StreamDeepLinks {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var player: String {
    get {return _player ?? String()}
    set {_player = newValue}
  }
  /// Returns true if `player` has been explicitly set.
  public var hasPlayer: Bool {return self._player != nil}
  /// Clears the value of `player`. Subsequent reads from it will return its default value.
  public mutating func clearPlayer() {self._player = nil}

  public var externalPlayer: Stremio_Core_Types_StreamDeepLinks.ExternalPlayerLink {
    get {return _externalPlayer ?? Stremio_Core_Types_StreamDeepLinks.ExternalPlayerLink()}
    set {_externalPlayer = newValue}
  }
  /// Returns true if `externalPlayer` has been explicitly set.
  public var hasExternalPlayer: Bool {return self._externalPlayer != nil}
  /// Clears the value of `externalPlayer`. Subsequent reads from it will return its default value.
  public mutating func clearExternalPlayer() {self._externalPlayer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct ExternalPlayerLink {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var download: String {
      get {return _download ?? String()}
      set {_download = newValue}
    }
    /// Returns true if `download` has been explicitly set.
    public var hasDownload: Bool {return self._download != nil}
    /// Clears the value of `download`. Subsequent reads from it will return its default value.
    public mutating func clearDownload() {self._download = nil}

    public var streaming: String {
      get {return _streaming ?? String()}
      set {_streaming = newValue}
    }
    /// Returns true if `streaming` has been explicitly set.
    public var hasStreaming: Bool {return self._streaming != nil}
    /// Clears the value of `streaming`. Subsequent reads from it will return its default value.
    public mutating func clearStreaming() {self._streaming = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _download: String? = nil
    fileprivate var _streaming: String? = nil
  }

  public init() {}

  fileprivate var _player: String? = nil
  fileprivate var _externalPlayer: Stremio_Core_Types_StreamDeepLinks.ExternalPlayerLink? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stremio_Core_Types_Stream: @unchecked Sendable {}
extension Stremio_Core_Types_Stream.OneOf_Source: @unchecked Sendable {}
extension Stremio_Core_Types_Stream.Url: @unchecked Sendable {}
extension Stremio_Core_Types_Stream.YouTube: @unchecked Sendable {}
extension Stremio_Core_Types_Stream.Torrent: @unchecked Sendable {}
extension Stremio_Core_Types_Stream.External: @unchecked Sendable {}
extension Stremio_Core_Types_Stream.PlayerFrame: @unchecked Sendable {}
extension Stremio_Core_Types_Stream.Rar: @unchecked Sendable {}
extension Stremio_Core_Types_Stream.Zip: @unchecked Sendable {}
extension Stremio_Core_Types_StreamBehaviorHints: @unchecked Sendable {}
extension Stremio_Core_Types_StreamProxyHeaders: @unchecked Sendable {}
extension Stremio_Core_Types_StreamDeepLinks: @unchecked Sendable {}
extension Stremio_Core_Types_StreamDeepLinks.ExternalPlayerLink: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stremio.core.types"

extension Stremio_Core_Types_Stream: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Stream"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .standard(proto: "you_tube"),
    3: .same(proto: "torrent"),
    4: .same(proto: "external"),
    5: .standard(proto: "player_frame"),
    6: .same(proto: "rar"),
    7: .same(proto: "zip"),
    8: .same(proto: "name"),
    9: .same(proto: "description"),
    10: .same(proto: "thumbnail"),
    11: .same(proto: "subtitles"),
    12: .standard(proto: "behavior_hints"),
    13: .standard(proto: "deep_links"),
  ]

  fileprivate class _StorageClass {
    var _source: Stremio_Core_Types_Stream.OneOf_Source?
    var _name: String? = nil
    var _description_p: String? = nil
    var _thumbnail: String? = nil
    var _subtitles: [Stremio_Core_Types_Subtitle] = []
    var _behaviorHints: Stremio_Core_Types_StreamBehaviorHints? = nil
    var _deepLinks: Stremio_Core_Types_StreamDeepLinks? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _source = source._source
      _name = source._name
      _description_p = source._description_p
      _thumbnail = source._thumbnail
      _subtitles = source._subtitles
      _behaviorHints = source._behaviorHints
      _deepLinks = source._deepLinks
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._behaviorHints == nil {return false}
      if _storage._deepLinks == nil {return false}
      if let v = _storage._source, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._subtitles) {return false}
      if let v = _storage._behaviorHints, !v.isInitialized {return false}
      if let v = _storage._deepLinks, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try {
          var v: Stremio_Core_Types_Stream.Url?
          var hadOneofValue = false
          if let current = _storage._source {
            hadOneofValue = true
            if case .url(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._source = .url(v)
          }
        }()
        case 2: try {
          var v: Stremio_Core_Types_Stream.YouTube?
          var hadOneofValue = false
          if let current = _storage._source {
            hadOneofValue = true
            if case .youTube(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._source = .youTube(v)
          }
        }()
        case 3: try {
          var v: Stremio_Core_Types_Stream.Torrent?
          var hadOneofValue = false
          if let current = _storage._source {
            hadOneofValue = true
            if case .torrent(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._source = .torrent(v)
          }
        }()
        case 4: try {
          var v: Stremio_Core_Types_Stream.External?
          var hadOneofValue = false
          if let current = _storage._source {
            hadOneofValue = true
            if case .external(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._source = .external(v)
          }
        }()
        case 5: try {
          var v: Stremio_Core_Types_Stream.PlayerFrame?
          var hadOneofValue = false
          if let current = _storage._source {
            hadOneofValue = true
            if case .playerFrame(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._source = .playerFrame(v)
          }
        }()
        case 6: try {
          var v: Stremio_Core_Types_Stream.Rar?
          var hadOneofValue = false
          if let current = _storage._source {
            hadOneofValue = true
            if case .rar(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._source = .rar(v)
          }
        }()
        case 7: try {
          var v: Stremio_Core_Types_Stream.Zip?
          var hadOneofValue = false
          if let current = _storage._source {
            hadOneofValue = true
            if case .zip(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._source = .zip(v)
          }
        }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._thumbnail) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._subtitles) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._behaviorHints) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._deepLinks) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      switch _storage._source {
      case .url?: try {
        guard case .url(let v)? = _storage._source else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }()
      case .youTube?: try {
        guard case .youTube(let v)? = _storage._source else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }()
      case .torrent?: try {
        guard case .torrent(let v)? = _storage._source else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case .external?: try {
        guard case .external(let v)? = _storage._source else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case .playerFrame?: try {
        guard case .playerFrame(let v)? = _storage._source else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }()
      case .rar?: try {
        guard case .rar(let v)? = _storage._source else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }()
      case .zip?: try {
        guard case .zip(let v)? = _storage._source else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }()
      case nil: break
      }
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._thumbnail {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      } }()
      if !_storage._subtitles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._subtitles, fieldNumber: 11)
      }
      try { if let v = _storage._behaviorHints {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._deepLinks {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_Stream, rhs: Stremio_Core_Types_Stream) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._source != rhs_storage._source {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._thumbnail != rhs_storage._thumbnail {return false}
        if _storage._subtitles != rhs_storage._subtitles {return false}
        if _storage._behaviorHints != rhs_storage._behaviorHints {return false}
        if _storage._deepLinks != rhs_storage._deepLinks {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_Stream.Url: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_Stream.protoMessageName + ".Url"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
  ]

  public var isInitialized: Bool {
    if self._url == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._url) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_Stream.Url, rhs: Stremio_Core_Types_Stream.Url) -> Bool {
    if lhs._url != rhs._url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_Stream.YouTube: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_Stream.protoMessageName + ".YouTube"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "yt_id"),
  ]

  public var isInitialized: Bool {
    if self._ytID == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._ytID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._ytID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_Stream.YouTube, rhs: Stremio_Core_Types_Stream.YouTube) -> Bool {
    if lhs._ytID != rhs._ytID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_Stream.Torrent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_Stream.protoMessageName + ".Torrent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "info_hash"),
    2: .standard(proto: "file_idx"),
    3: .same(proto: "announce"),
    4: .standard(proto: "file_must_include"),
  ]

  public var isInitialized: Bool {
    if self._infoHash == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._infoHash) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._fileIdx) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.announce) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.fileMustInclude) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._infoHash {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fileIdx {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    if !self.announce.isEmpty {
      try visitor.visitRepeatedStringField(value: self.announce, fieldNumber: 3)
    }
    if !self.fileMustInclude.isEmpty {
      try visitor.visitRepeatedStringField(value: self.fileMustInclude, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_Stream.Torrent, rhs: Stremio_Core_Types_Stream.Torrent) -> Bool {
    if lhs._infoHash != rhs._infoHash {return false}
    if lhs._fileIdx != rhs._fileIdx {return false}
    if lhs.announce != rhs.announce {return false}
    if lhs.fileMustInclude != rhs.fileMustInclude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_Stream.External: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_Stream.protoMessageName + ".External"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "external_url"),
    2: .standard(proto: "android_tv_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._externalURL) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._androidTvURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._externalURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._androidTvURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_Stream.External, rhs: Stremio_Core_Types_Stream.External) -> Bool {
    if lhs._externalURL != rhs._externalURL {return false}
    if lhs._androidTvURL != rhs._androidTvURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_Stream.PlayerFrame: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_Stream.protoMessageName + ".PlayerFrame"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_frame_url"),
  ]

  public var isInitialized: Bool {
    if self._playerFrameURL == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._playerFrameURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._playerFrameURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_Stream.PlayerFrame, rhs: Stremio_Core_Types_Stream.PlayerFrame) -> Bool {
    if lhs._playerFrameURL != rhs._playerFrameURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_Stream.Rar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_Stream.protoMessageName + ".Rar"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rar_urls"),
    2: .standard(proto: "file_idx"),
    3: .standard(proto: "file_must_include"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.rarUrls) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._fileIdx) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.fileMustInclude) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rarUrls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.rarUrls, fieldNumber: 1)
    }
    try { if let v = self._fileIdx {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    if !self.fileMustInclude.isEmpty {
      try visitor.visitRepeatedStringField(value: self.fileMustInclude, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_Stream.Rar, rhs: Stremio_Core_Types_Stream.Rar) -> Bool {
    if lhs.rarUrls != rhs.rarUrls {return false}
    if lhs._fileIdx != rhs._fileIdx {return false}
    if lhs.fileMustInclude != rhs.fileMustInclude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_Stream.Zip: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_Stream.protoMessageName + ".Zip"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "zip_urls"),
    2: .standard(proto: "file_idx"),
    3: .standard(proto: "file_must_include"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.zipUrls) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._fileIdx) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.fileMustInclude) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.zipUrls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.zipUrls, fieldNumber: 1)
    }
    try { if let v = self._fileIdx {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    if !self.fileMustInclude.isEmpty {
      try visitor.visitRepeatedStringField(value: self.fileMustInclude, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_Stream.Zip, rhs: Stremio_Core_Types_Stream.Zip) -> Bool {
    if lhs.zipUrls != rhs.zipUrls {return false}
    if lhs._fileIdx != rhs._fileIdx {return false}
    if lhs.fileMustInclude != rhs.fileMustInclude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_StreamBehaviorHints: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamBehaviorHints"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "not_web_ready"),
    2: .standard(proto: "binge_group"),
    3: .standard(proto: "country_whitelist"),
    4: .standard(proto: "proxy_headers"),
    5: .same(proto: "filename"),
    6: .standard(proto: "video_hash"),
    7: .standard(proto: "video_size"),
  ]

  public var isInitialized: Bool {
    if self._notWebReady == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._notWebReady) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._bingeGroup) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.countryWhitelist) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._proxyHeaders) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._filename) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._videoHash) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self._videoSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._notWebReady {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._bingeGroup {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.countryWhitelist.isEmpty {
      try visitor.visitRepeatedStringField(value: self.countryWhitelist, fieldNumber: 3)
    }
    try { if let v = self._proxyHeaders {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._filename {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._videoHash {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._videoSize {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_StreamBehaviorHints, rhs: Stremio_Core_Types_StreamBehaviorHints) -> Bool {
    if lhs._notWebReady != rhs._notWebReady {return false}
    if lhs._bingeGroup != rhs._bingeGroup {return false}
    if lhs.countryWhitelist != rhs.countryWhitelist {return false}
    if lhs._proxyHeaders != rhs._proxyHeaders {return false}
    if lhs._filename != rhs._filename {return false}
    if lhs._videoHash != rhs._videoHash {return false}
    if lhs._videoSize != rhs._videoSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_StreamProxyHeaders: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamProxyHeaders"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.request) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.response) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.request.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.request, fieldNumber: 1)
    }
    if !self.response.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.response, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_StreamProxyHeaders, rhs: Stremio_Core_Types_StreamProxyHeaders) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_StreamDeepLinks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamDeepLinks"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "player"),
    2: .standard(proto: "external_player"),
  ]

  public var isInitialized: Bool {
    if self._player == nil {return false}
    if self._externalPlayer == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._player) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._externalPlayer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._player {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._externalPlayer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_StreamDeepLinks, rhs: Stremio_Core_Types_StreamDeepLinks) -> Bool {
    if lhs._player != rhs._player {return false}
    if lhs._externalPlayer != rhs._externalPlayer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_StreamDeepLinks.ExternalPlayerLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_StreamDeepLinks.protoMessageName + ".ExternalPlayerLink"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "download"),
    2: .same(proto: "streaming"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._download) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._streaming) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._download {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._streaming {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_StreamDeepLinks.ExternalPlayerLink, rhs: Stremio_Core_Types_StreamDeepLinks.ExternalPlayerLink) -> Bool {
    if lhs._download != rhs._download {return false}
    if lhs._streaming != rhs._streaming {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
