// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stremio/core/types/video.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Stremio_Core_Types_Video {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  public var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  public mutating func clearTitle() {self._title = nil}

  public var released: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _released ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_released = newValue}
  }
  /// Returns true if `released` has been explicitly set.
  public var hasReleased: Bool {return self._released != nil}
  /// Clears the value of `released`. Subsequent reads from it will return its default value.
  public mutating func clearReleased() {self._released = nil}

  public var overview: String {
    get {return _overview ?? String()}
    set {_overview = newValue}
  }
  /// Returns true if `overview` has been explicitly set.
  public var hasOverview: Bool {return self._overview != nil}
  /// Clears the value of `overview`. Subsequent reads from it will return its default value.
  public mutating func clearOverview() {self._overview = nil}

  public var thumbnail: String {
    get {return _thumbnail ?? String()}
    set {_thumbnail = newValue}
  }
  /// Returns true if `thumbnail` has been explicitly set.
  public var hasThumbnail: Bool {return self._thumbnail != nil}
  /// Clears the value of `thumbnail`. Subsequent reads from it will return its default value.
  public mutating func clearThumbnail() {self._thumbnail = nil}

  public var streams: [Stremio_Core_Types_Stream] = []

  public var seriesInfo: Stremio_Core_Types_Video.SeriesInfo {
    get {return _seriesInfo ?? Stremio_Core_Types_Video.SeriesInfo()}
    set {_seriesInfo = newValue}
  }
  /// Returns true if `seriesInfo` has been explicitly set.
  public var hasSeriesInfo: Bool {return self._seriesInfo != nil}
  /// Clears the value of `seriesInfo`. Subsequent reads from it will return its default value.
  public mutating func clearSeriesInfo() {self._seriesInfo = nil}

  public var upcoming: Bool {
    get {return _upcoming ?? false}
    set {_upcoming = newValue}
  }
  /// Returns true if `upcoming` has been explicitly set.
  public var hasUpcoming: Bool {return self._upcoming != nil}
  /// Clears the value of `upcoming`. Subsequent reads from it will return its default value.
  public mutating func clearUpcoming() {self._upcoming = nil}

  public var watched: Bool {
    get {return _watched ?? false}
    set {_watched = newValue}
  }
  /// Returns true if `watched` has been explicitly set.
  public var hasWatched: Bool {return self._watched != nil}
  /// Clears the value of `watched`. Subsequent reads from it will return its default value.
  public mutating func clearWatched() {self._watched = nil}

  public var currentVideo: Bool {
    get {return _currentVideo ?? false}
    set {_currentVideo = newValue}
  }
  /// Returns true if `currentVideo` has been explicitly set.
  public var hasCurrentVideo: Bool {return self._currentVideo != nil}
  /// Clears the value of `currentVideo`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentVideo() {self._currentVideo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct SeriesInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var season: Int64 {
      get {return _season ?? 0}
      set {_season = newValue}
    }
    /// Returns true if `season` has been explicitly set.
    public var hasSeason: Bool {return self._season != nil}
    /// Clears the value of `season`. Subsequent reads from it will return its default value.
    public mutating func clearSeason() {self._season = nil}

    public var episode: Int64 {
      get {return _episode ?? 0}
      set {_episode = newValue}
    }
    /// Returns true if `episode` has been explicitly set.
    public var hasEpisode: Bool {return self._episode != nil}
    /// Clears the value of `episode`. Subsequent reads from it will return its default value.
    public mutating func clearEpisode() {self._episode = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _season: Int64? = nil
    fileprivate var _episode: Int64? = nil
  }

  public init() {}

  fileprivate var _id: String? = nil
  fileprivate var _title: String? = nil
  fileprivate var _released: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _overview: String? = nil
  fileprivate var _thumbnail: String? = nil
  fileprivate var _seriesInfo: Stremio_Core_Types_Video.SeriesInfo? = nil
  fileprivate var _upcoming: Bool? = nil
  fileprivate var _watched: Bool? = nil
  fileprivate var _currentVideo: Bool? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stremio_Core_Types_Video: @unchecked Sendable {}
extension Stremio_Core_Types_Video.SeriesInfo: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stremio.core.types"

extension Stremio_Core_Types_Video: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Video"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "released"),
    4: .same(proto: "overview"),
    5: .same(proto: "thumbnail"),
    6: .same(proto: "streams"),
    7: .same(proto: "seriesInfo"),
    8: .same(proto: "upcoming"),
    9: .same(proto: "watched"),
    10: .standard(proto: "current_video"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._title == nil {return false}
    if self._upcoming == nil {return false}
    if self._watched == nil {return false}
    if self._currentVideo == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.streams) {return false}
    if let v = self._seriesInfo, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._released) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._overview) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._thumbnail) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.streams) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._seriesInfo) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self._upcoming) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self._watched) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self._currentVideo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._released {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._overview {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._thumbnail {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    if !self.streams.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.streams, fieldNumber: 6)
    }
    try { if let v = self._seriesInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._upcoming {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._watched {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._currentVideo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_Video, rhs: Stremio_Core_Types_Video) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs._released != rhs._released {return false}
    if lhs._overview != rhs._overview {return false}
    if lhs._thumbnail != rhs._thumbnail {return false}
    if lhs.streams != rhs.streams {return false}
    if lhs._seriesInfo != rhs._seriesInfo {return false}
    if lhs._upcoming != rhs._upcoming {return false}
    if lhs._watched != rhs._watched {return false}
    if lhs._currentVideo != rhs._currentVideo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_Video.SeriesInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_Video.protoMessageName + ".SeriesInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "season"),
    2: .same(proto: "episode"),
  ]

  public var isInitialized: Bool {
    if self._season == nil {return false}
    if self._episode == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self._season) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self._episode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._season {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._episode {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_Video.SeriesInfo, rhs: Stremio_Core_Types_Video.SeriesInfo) -> Bool {
    if lhs._season != rhs._season {return false}
    if lhs._episode != rhs._episode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
