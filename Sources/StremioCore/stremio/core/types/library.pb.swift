// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stremio/core/types/library.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Stremio_Core_Types_LibraryItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id ?? String()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var type: String {
    get {return _storage._type ?? String()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_uniqueStorage()._type = nil}

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_uniqueStorage()._name = nil}

  public var poster: String {
    get {return _storage._poster ?? String()}
    set {_uniqueStorage()._poster = newValue}
  }
  /// Returns true if `poster` has been explicitly set.
  public var hasPoster: Bool {return _storage._poster != nil}
  /// Clears the value of `poster`. Subsequent reads from it will return its default value.
  public mutating func clearPoster() {_uniqueStorage()._poster = nil}

  public var posterShape: Stremio_Core_Types_PosterShape {
    get {return _storage._posterShape ?? .poster}
    set {_uniqueStorage()._posterShape = newValue}
  }
  /// Returns true if `posterShape` has been explicitly set.
  public var hasPosterShape: Bool {return _storage._posterShape != nil}
  /// Clears the value of `posterShape`. Subsequent reads from it will return its default value.
  public mutating func clearPosterShape() {_uniqueStorage()._posterShape = nil}

  public var state: Stremio_Core_Types_LibraryItemState {
    get {return _storage._state ?? Stremio_Core_Types_LibraryItemState()}
    set {_uniqueStorage()._state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return _storage._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {_uniqueStorage()._state = nil}

  public var behaviorHints: Stremio_Core_Types_MetaItemBehaviorHints {
    get {return _storage._behaviorHints ?? Stremio_Core_Types_MetaItemBehaviorHints()}
    set {_uniqueStorage()._behaviorHints = newValue}
  }
  /// Returns true if `behaviorHints` has been explicitly set.
  public var hasBehaviorHints: Bool {return _storage._behaviorHints != nil}
  /// Clears the value of `behaviorHints`. Subsequent reads from it will return its default value.
  public mutating func clearBehaviorHints() {_uniqueStorage()._behaviorHints = nil}

  public var deepLinks: Stremio_Core_Types_MetaItemDeepLinks {
    get {return _storage._deepLinks ?? Stremio_Core_Types_MetaItemDeepLinks()}
    set {_uniqueStorage()._deepLinks = newValue}
  }
  /// Returns true if `deepLinks` has been explicitly set.
  public var hasDeepLinks: Bool {return _storage._deepLinks != nil}
  /// Clears the value of `deepLinks`. Subsequent reads from it will return its default value.
  public mutating func clearDeepLinks() {_uniqueStorage()._deepLinks = nil}

  public var progress: Double {
    get {return _storage._progress ?? 0}
    set {_uniqueStorage()._progress = newValue}
  }
  /// Returns true if `progress` has been explicitly set.
  public var hasProgress: Bool {return _storage._progress != nil}
  /// Clears the value of `progress`. Subsequent reads from it will return its default value.
  public mutating func clearProgress() {_uniqueStorage()._progress = nil}

  public var watched: Bool {
    get {return _storage._watched ?? false}
    set {_uniqueStorage()._watched = newValue}
  }
  /// Returns true if `watched` has been explicitly set.
  public var hasWatched: Bool {return _storage._watched != nil}
  /// Clears the value of `watched`. Subsequent reads from it will return its default value.
  public mutating func clearWatched() {_uniqueStorage()._watched = nil}

  public var notifications: UInt64 {
    get {return _storage._notifications ?? 0}
    set {_uniqueStorage()._notifications = newValue}
  }
  /// Returns true if `notifications` has been explicitly set.
  public var hasNotifications: Bool {return _storage._notifications != nil}
  /// Clears the value of `notifications`. Subsequent reads from it will return its default value.
  public mutating func clearNotifications() {_uniqueStorage()._notifications = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Stremio_Core_Types_LibraryItemState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var timeOffset: UInt64 {
    get {return _timeOffset ?? 0}
    set {_timeOffset = newValue}
  }
  /// Returns true if `timeOffset` has been explicitly set.
  public var hasTimeOffset: Bool {return self._timeOffset != nil}
  /// Clears the value of `timeOffset`. Subsequent reads from it will return its default value.
  public mutating func clearTimeOffset() {self._timeOffset = nil}

  public var duration: UInt64 {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  public var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  public mutating func clearDuration() {self._duration = nil}

  public var videoID: String {
    get {return _videoID ?? String()}
    set {_videoID = newValue}
  }
  /// Returns true if `videoID` has been explicitly set.
  public var hasVideoID: Bool {return self._videoID != nil}
  /// Clears the value of `videoID`. Subsequent reads from it will return its default value.
  public mutating func clearVideoID() {self._videoID = nil}

  public var noNotif: Bool {
    get {return _noNotif ?? false}
    set {_noNotif = newValue}
  }
  /// Returns true if `noNotif` has been explicitly set.
  public var hasNoNotif: Bool {return self._noNotif != nil}
  /// Clears the value of `noNotif`. Subsequent reads from it will return its default value.
  public mutating func clearNoNotif() {self._noNotif = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeOffset: UInt64? = nil
  fileprivate var _duration: UInt64? = nil
  fileprivate var _videoID: String? = nil
  fileprivate var _noNotif: Bool? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stremio_Core_Types_LibraryItem: @unchecked Sendable {}
extension Stremio_Core_Types_LibraryItemState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stremio.core.types"

extension Stremio_Core_Types_LibraryItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LibraryItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "name"),
    4: .same(proto: "poster"),
    5: .standard(proto: "poster_shape"),
    6: .same(proto: "state"),
    7: .standard(proto: "behavior_hints"),
    8: .standard(proto: "deep_links"),
    9: .same(proto: "progress"),
    10: .same(proto: "watched"),
    11: .same(proto: "notifications"),
  ]

  fileprivate class _StorageClass {
    var _id: String? = nil
    var _type: String? = nil
    var _name: String? = nil
    var _poster: String? = nil
    var _posterShape: Stremio_Core_Types_PosterShape? = nil
    var _state: Stremio_Core_Types_LibraryItemState? = nil
    var _behaviorHints: Stremio_Core_Types_MetaItemBehaviorHints? = nil
    var _deepLinks: Stremio_Core_Types_MetaItemDeepLinks? = nil
    var _progress: Double? = nil
    var _watched: Bool? = nil
    var _notifications: UInt64? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _type = source._type
      _name = source._name
      _poster = source._poster
      _posterShape = source._posterShape
      _state = source._state
      _behaviorHints = source._behaviorHints
      _deepLinks = source._deepLinks
      _progress = source._progress
      _watched = source._watched
      _notifications = source._notifications
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if _storage._type == nil {return false}
      if _storage._name == nil {return false}
      if _storage._posterShape == nil {return false}
      if _storage._state == nil {return false}
      if _storage._behaviorHints == nil {return false}
      if _storage._deepLinks == nil {return false}
      if _storage._progress == nil {return false}
      if _storage._watched == nil {return false}
      if _storage._notifications == nil {return false}
      if let v = _storage._state, !v.isInitialized {return false}
      if let v = _storage._behaviorHints, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._type) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._poster) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._posterShape) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._state) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._behaviorHints) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._deepLinks) }()
        case 9: try { try decoder.decodeSingularDoubleField(value: &_storage._progress) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._watched) }()
        case 11: try { try decoder.decodeSingularUInt64Field(value: &_storage._notifications) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._type {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._poster {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._posterShape {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._state {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._behaviorHints {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._deepLinks {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._progress {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._watched {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._notifications {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 11)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_LibraryItem, rhs: Stremio_Core_Types_LibraryItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._poster != rhs_storage._poster {return false}
        if _storage._posterShape != rhs_storage._posterShape {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._behaviorHints != rhs_storage._behaviorHints {return false}
        if _storage._deepLinks != rhs_storage._deepLinks {return false}
        if _storage._progress != rhs_storage._progress {return false}
        if _storage._watched != rhs_storage._watched {return false}
        if _storage._notifications != rhs_storage._notifications {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_LibraryItemState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LibraryItemState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_offset"),
    2: .same(proto: "duration"),
    3: .standard(proto: "video_id"),
    4: .standard(proto: "no_notif"),
  ]

  public var isInitialized: Bool {
    if self._timeOffset == nil {return false}
    if self._duration == nil {return false}
    if self._noNotif == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._timeOffset) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._duration) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._videoID) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._noNotif) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeOffset {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._duration {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._videoID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._noNotif {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_LibraryItemState, rhs: Stremio_Core_Types_LibraryItemState) -> Bool {
    if lhs._timeOffset != rhs._timeOffset {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._videoID != rhs._videoID {return false}
    if lhs._noNotif != rhs._noNotif {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
