// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stremio/core/types/profile.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Stremio_Core_Types_Profile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var auth: Stremio_Core_Types_Auth {
    get {return _auth ?? Stremio_Core_Types_Auth()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  public var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  public mutating func clearAuth() {self._auth = nil}

  /// repeated Descriptor addons = 2;
  public var settings: Stremio_Core_Types_Profile.Settings {
    get {return _settings ?? Stremio_Core_Types_Profile.Settings()}
    set {_settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  public var hasSettings: Bool {return self._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  public mutating func clearSettings() {self._settings = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum FrameRateMatchingStrategy: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case disabled // = 0
    case frameRateOnly // = 1
    case frameRateAndResolution // = 2

    public init() {
      self = .disabled
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .disabled
      case 1: self = .frameRateOnly
      case 2: self = .frameRateAndResolution
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .disabled: return 0
      case .frameRateOnly: return 1
      case .frameRateAndResolution: return 2
      }
    }

  }

  public struct Settings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var interfaceLanguage: String {
      get {return _storage._interfaceLanguage ?? String()}
      set {_uniqueStorage()._interfaceLanguage = newValue}
    }
    /// Returns true if `interfaceLanguage` has been explicitly set.
    public var hasInterfaceLanguage: Bool {return _storage._interfaceLanguage != nil}
    /// Clears the value of `interfaceLanguage`. Subsequent reads from it will return its default value.
    public mutating func clearInterfaceLanguage() {_uniqueStorage()._interfaceLanguage = nil}

    public var streamingServerURL: String {
      get {return _storage._streamingServerURL ?? String()}
      set {_uniqueStorage()._streamingServerURL = newValue}
    }
    /// Returns true if `streamingServerURL` has been explicitly set.
    public var hasStreamingServerURL: Bool {return _storage._streamingServerURL != nil}
    /// Clears the value of `streamingServerURL`. Subsequent reads from it will return its default value.
    public mutating func clearStreamingServerURL() {_uniqueStorage()._streamingServerURL = nil}

    public var bingeWatching: Bool {
      get {return _storage._bingeWatching ?? false}
      set {_uniqueStorage()._bingeWatching = newValue}
    }
    /// Returns true if `bingeWatching` has been explicitly set.
    public var hasBingeWatching: Bool {return _storage._bingeWatching != nil}
    /// Clears the value of `bingeWatching`. Subsequent reads from it will return its default value.
    public mutating func clearBingeWatching() {_uniqueStorage()._bingeWatching = nil}

    public var playInBackground: Bool {
      get {return _storage._playInBackground ?? false}
      set {_uniqueStorage()._playInBackground = newValue}
    }
    /// Returns true if `playInBackground` has been explicitly set.
    public var hasPlayInBackground: Bool {return _storage._playInBackground != nil}
    /// Clears the value of `playInBackground`. Subsequent reads from it will return its default value.
    public mutating func clearPlayInBackground() {_uniqueStorage()._playInBackground = nil}

    public var hardwareDecoding: Bool {
      get {return _storage._hardwareDecoding ?? false}
      set {_uniqueStorage()._hardwareDecoding = newValue}
    }
    /// Returns true if `hardwareDecoding` has been explicitly set.
    public var hasHardwareDecoding: Bool {return _storage._hardwareDecoding != nil}
    /// Clears the value of `hardwareDecoding`. Subsequent reads from it will return its default value.
    public mutating func clearHardwareDecoding() {_uniqueStorage()._hardwareDecoding = nil}

    public var audioPassthrough: Bool {
      get {return _storage._audioPassthrough ?? false}
      set {_uniqueStorage()._audioPassthrough = newValue}
    }
    /// Returns true if `audioPassthrough` has been explicitly set.
    public var hasAudioPassthrough: Bool {return _storage._audioPassthrough != nil}
    /// Clears the value of `audioPassthrough`. Subsequent reads from it will return its default value.
    public mutating func clearAudioPassthrough() {_uniqueStorage()._audioPassthrough = nil}

    public var audioLanguage: String {
      get {return _storage._audioLanguage ?? String()}
      set {_uniqueStorage()._audioLanguage = newValue}
    }
    /// Returns true if `audioLanguage` has been explicitly set.
    public var hasAudioLanguage: Bool {return _storage._audioLanguage != nil}
    /// Clears the value of `audioLanguage`. Subsequent reads from it will return its default value.
    public mutating func clearAudioLanguage() {_uniqueStorage()._audioLanguage = nil}

    public var subtitlesLanguage: String {
      get {return _storage._subtitlesLanguage ?? String()}
      set {_uniqueStorage()._subtitlesLanguage = newValue}
    }
    /// Returns true if `subtitlesLanguage` has been explicitly set.
    public var hasSubtitlesLanguage: Bool {return _storage._subtitlesLanguage != nil}
    /// Clears the value of `subtitlesLanguage`. Subsequent reads from it will return its default value.
    public mutating func clearSubtitlesLanguage() {_uniqueStorage()._subtitlesLanguage = nil}

    public var subtitlesSize: Int32 {
      get {return _storage._subtitlesSize ?? 0}
      set {_uniqueStorage()._subtitlesSize = newValue}
    }
    /// Returns true if `subtitlesSize` has been explicitly set.
    public var hasSubtitlesSize: Bool {return _storage._subtitlesSize != nil}
    /// Clears the value of `subtitlesSize`. Subsequent reads from it will return its default value.
    public mutating func clearSubtitlesSize() {_uniqueStorage()._subtitlesSize = nil}

    public var subtitlesFont: String {
      get {return _storage._subtitlesFont ?? String()}
      set {_uniqueStorage()._subtitlesFont = newValue}
    }
    /// Returns true if `subtitlesFont` has been explicitly set.
    public var hasSubtitlesFont: Bool {return _storage._subtitlesFont != nil}
    /// Clears the value of `subtitlesFont`. Subsequent reads from it will return its default value.
    public mutating func clearSubtitlesFont() {_uniqueStorage()._subtitlesFont = nil}

    public var subtitlesBold: Bool {
      get {return _storage._subtitlesBold ?? false}
      set {_uniqueStorage()._subtitlesBold = newValue}
    }
    /// Returns true if `subtitlesBold` has been explicitly set.
    public var hasSubtitlesBold: Bool {return _storage._subtitlesBold != nil}
    /// Clears the value of `subtitlesBold`. Subsequent reads from it will return its default value.
    public mutating func clearSubtitlesBold() {_uniqueStorage()._subtitlesBold = nil}

    public var subtitlesOffset: Int32 {
      get {return _storage._subtitlesOffset ?? 0}
      set {_uniqueStorage()._subtitlesOffset = newValue}
    }
    /// Returns true if `subtitlesOffset` has been explicitly set.
    public var hasSubtitlesOffset: Bool {return _storage._subtitlesOffset != nil}
    /// Clears the value of `subtitlesOffset`. Subsequent reads from it will return its default value.
    public mutating func clearSubtitlesOffset() {_uniqueStorage()._subtitlesOffset = nil}

    public var subtitlesTextColor: String {
      get {return _storage._subtitlesTextColor ?? String()}
      set {_uniqueStorage()._subtitlesTextColor = newValue}
    }
    /// Returns true if `subtitlesTextColor` has been explicitly set.
    public var hasSubtitlesTextColor: Bool {return _storage._subtitlesTextColor != nil}
    /// Clears the value of `subtitlesTextColor`. Subsequent reads from it will return its default value.
    public mutating func clearSubtitlesTextColor() {_uniqueStorage()._subtitlesTextColor = nil}

    public var subtitlesBackgroundColor: String {
      get {return _storage._subtitlesBackgroundColor ?? String()}
      set {_uniqueStorage()._subtitlesBackgroundColor = newValue}
    }
    /// Returns true if `subtitlesBackgroundColor` has been explicitly set.
    public var hasSubtitlesBackgroundColor: Bool {return _storage._subtitlesBackgroundColor != nil}
    /// Clears the value of `subtitlesBackgroundColor`. Subsequent reads from it will return its default value.
    public mutating func clearSubtitlesBackgroundColor() {_uniqueStorage()._subtitlesBackgroundColor = nil}

    public var subtitlesOutlineColor: String {
      get {return _storage._subtitlesOutlineColor ?? String()}
      set {_uniqueStorage()._subtitlesOutlineColor = newValue}
    }
    /// Returns true if `subtitlesOutlineColor` has been explicitly set.
    public var hasSubtitlesOutlineColor: Bool {return _storage._subtitlesOutlineColor != nil}
    /// Clears the value of `subtitlesOutlineColor`. Subsequent reads from it will return its default value.
    public mutating func clearSubtitlesOutlineColor() {_uniqueStorage()._subtitlesOutlineColor = nil}

    public var subtitlesOpacity: Int32 {
      get {return _storage._subtitlesOpacity ?? 0}
      set {_uniqueStorage()._subtitlesOpacity = newValue}
    }
    /// Returns true if `subtitlesOpacity` has been explicitly set.
    public var hasSubtitlesOpacity: Bool {return _storage._subtitlesOpacity != nil}
    /// Clears the value of `subtitlesOpacity`. Subsequent reads from it will return its default value.
    public mutating func clearSubtitlesOpacity() {_uniqueStorage()._subtitlesOpacity = nil}

    public var escExitFullscreen: Bool {
      get {return _storage._escExitFullscreen ?? false}
      set {_uniqueStorage()._escExitFullscreen = newValue}
    }
    /// Returns true if `escExitFullscreen` has been explicitly set.
    public var hasEscExitFullscreen: Bool {return _storage._escExitFullscreen != nil}
    /// Clears the value of `escExitFullscreen`. Subsequent reads from it will return its default value.
    public mutating func clearEscExitFullscreen() {_uniqueStorage()._escExitFullscreen = nil}

    public var seekTimeDuration: Int64 {
      get {return _storage._seekTimeDuration ?? 0}
      set {_uniqueStorage()._seekTimeDuration = newValue}
    }
    /// Returns true if `seekTimeDuration` has been explicitly set.
    public var hasSeekTimeDuration: Bool {return _storage._seekTimeDuration != nil}
    /// Clears the value of `seekTimeDuration`. Subsequent reads from it will return its default value.
    public mutating func clearSeekTimeDuration() {_uniqueStorage()._seekTimeDuration = nil}

    public var seekShortTimeDuration: Int64 {
      get {return _storage._seekShortTimeDuration ?? 0}
      set {_uniqueStorage()._seekShortTimeDuration = newValue}
    }
    /// Returns true if `seekShortTimeDuration` has been explicitly set.
    public var hasSeekShortTimeDuration: Bool {return _storage._seekShortTimeDuration != nil}
    /// Clears the value of `seekShortTimeDuration`. Subsequent reads from it will return its default value.
    public mutating func clearSeekShortTimeDuration() {_uniqueStorage()._seekShortTimeDuration = nil}

    public var pauseOnMinimize: Bool {
      get {return _storage._pauseOnMinimize ?? false}
      set {_uniqueStorage()._pauseOnMinimize = newValue}
    }
    /// Returns true if `pauseOnMinimize` has been explicitly set.
    public var hasPauseOnMinimize: Bool {return _storage._pauseOnMinimize != nil}
    /// Clears the value of `pauseOnMinimize`. Subsequent reads from it will return its default value.
    public mutating func clearPauseOnMinimize() {_uniqueStorage()._pauseOnMinimize = nil}

    public var secondaryAudioLanguage: String {
      get {return _storage._secondaryAudioLanguage ?? String()}
      set {_uniqueStorage()._secondaryAudioLanguage = newValue}
    }
    /// Returns true if `secondaryAudioLanguage` has been explicitly set.
    public var hasSecondaryAudioLanguage: Bool {return _storage._secondaryAudioLanguage != nil}
    /// Clears the value of `secondaryAudioLanguage`. Subsequent reads from it will return its default value.
    public mutating func clearSecondaryAudioLanguage() {_uniqueStorage()._secondaryAudioLanguage = nil}

    public var secondarySubtitlesLanguage: String {
      get {return _storage._secondarySubtitlesLanguage ?? String()}
      set {_uniqueStorage()._secondarySubtitlesLanguage = newValue}
    }
    /// Returns true if `secondarySubtitlesLanguage` has been explicitly set.
    public var hasSecondarySubtitlesLanguage: Bool {return _storage._secondarySubtitlesLanguage != nil}
    /// Clears the value of `secondarySubtitlesLanguage`. Subsequent reads from it will return its default value.
    public mutating func clearSecondarySubtitlesLanguage() {_uniqueStorage()._secondarySubtitlesLanguage = nil}

    public var playerType: String {
      get {return _storage._playerType ?? String()}
      set {_uniqueStorage()._playerType = newValue}
    }
    /// Returns true if `playerType` has been explicitly set.
    public var hasPlayerType: Bool {return _storage._playerType != nil}
    /// Clears the value of `playerType`. Subsequent reads from it will return its default value.
    public mutating func clearPlayerType() {_uniqueStorage()._playerType = nil}

    public var frameRateMatchingStrategy: Stremio_Core_Types_Profile.FrameRateMatchingStrategy {
      get {return _storage._frameRateMatchingStrategy ?? .disabled}
      set {_uniqueStorage()._frameRateMatchingStrategy = newValue}
    }
    /// Returns true if `frameRateMatchingStrategy` has been explicitly set.
    public var hasFrameRateMatchingStrategy: Bool {return _storage._frameRateMatchingStrategy != nil}
    /// Clears the value of `frameRateMatchingStrategy`. Subsequent reads from it will return its default value.
    public mutating func clearFrameRateMatchingStrategy() {_uniqueStorage()._frameRateMatchingStrategy = nil}

    public var nextVideoNotificationDuration: Int64 {
      get {return _storage._nextVideoNotificationDuration ?? 0}
      set {_uniqueStorage()._nextVideoNotificationDuration = newValue}
    }
    /// Returns true if `nextVideoNotificationDuration` has been explicitly set.
    public var hasNextVideoNotificationDuration: Bool {return _storage._nextVideoNotificationDuration != nil}
    /// Clears the value of `nextVideoNotificationDuration`. Subsequent reads from it will return its default value.
    public mutating func clearNextVideoNotificationDuration() {_uniqueStorage()._nextVideoNotificationDuration = nil}

    public var surroundSound: Bool {
      get {return _storage._surroundSound ?? false}
      set {_uniqueStorage()._surroundSound = newValue}
    }
    /// Returns true if `surroundSound` has been explicitly set.
    public var hasSurroundSound: Bool {return _storage._surroundSound != nil}
    /// Clears the value of `surroundSound`. Subsequent reads from it will return its default value.
    public mutating func clearSurroundSound() {_uniqueStorage()._surroundSound = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _auth: Stremio_Core_Types_Auth? = nil
  fileprivate var _settings: Stremio_Core_Types_Profile.Settings? = nil
}

#if swift(>=4.2)

extension Stremio_Core_Types_Profile.FrameRateMatchingStrategy: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct Stremio_Core_Types_Auth {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var key: String {
    get {return _key ?? String()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {self._key = nil}

  public var user: Stremio_Core_Types_User {
    get {return _user ?? Stremio_Core_Types_User()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {self._user = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _key: String? = nil
  fileprivate var _user: Stremio_Core_Types_User? = nil
}

public struct Stremio_Core_Types_User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var email: String {
    get {return _email ?? String()}
    set {_email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  public var hasEmail: Bool {return self._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  public mutating func clearEmail() {self._email = nil}

  public var fbID: String {
    get {return _fbID ?? String()}
    set {_fbID = newValue}
  }
  /// Returns true if `fbID` has been explicitly set.
  public var hasFbID: Bool {return self._fbID != nil}
  /// Clears the value of `fbID`. Subsequent reads from it will return its default value.
  public mutating func clearFbID() {self._fbID = nil}

  public var avatar: String {
    get {return _avatar ?? String()}
    set {_avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  public var hasAvatar: Bool {return self._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  public mutating func clearAvatar() {self._avatar = nil}

  public var gdprConsent: Stremio_Core_Types_GDPRConsent {
    get {return _gdprConsent ?? Stremio_Core_Types_GDPRConsent()}
    set {_gdprConsent = newValue}
  }
  /// Returns true if `gdprConsent` has been explicitly set.
  public var hasGdprConsent: Bool {return self._gdprConsent != nil}
  /// Clears the value of `gdprConsent`. Subsequent reads from it will return its default value.
  public mutating func clearGdprConsent() {self._gdprConsent = nil}

  public var dateRegistered: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _dateRegistered ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_dateRegistered = newValue}
  }
  /// Returns true if `dateRegistered` has been explicitly set.
  public var hasDateRegistered: Bool {return self._dateRegistered != nil}
  /// Clears the value of `dateRegistered`. Subsequent reads from it will return its default value.
  public mutating func clearDateRegistered() {self._dateRegistered = nil}

  public var lastModified: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastModified ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  public var hasLastModified: Bool {return self._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  public mutating func clearLastModified() {self._lastModified = nil}

  public var premiumExpire: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _premiumExpire ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_premiumExpire = newValue}
  }
  /// Returns true if `premiumExpire` has been explicitly set.
  public var hasPremiumExpire: Bool {return self._premiumExpire != nil}
  /// Clears the value of `premiumExpire`. Subsequent reads from it will return its default value.
  public mutating func clearPremiumExpire() {self._premiumExpire = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: String? = nil
  fileprivate var _email: String? = nil
  fileprivate var _fbID: String? = nil
  fileprivate var _avatar: String? = nil
  fileprivate var _gdprConsent: Stremio_Core_Types_GDPRConsent? = nil
  fileprivate var _dateRegistered: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastModified: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _premiumExpire: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Stremio_Core_Types_GDPRConsent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tos: Bool {
    get {return _tos ?? false}
    set {_tos = newValue}
  }
  /// Returns true if `tos` has been explicitly set.
  public var hasTos: Bool {return self._tos != nil}
  /// Clears the value of `tos`. Subsequent reads from it will return its default value.
  public mutating func clearTos() {self._tos = nil}

  public var privacy: Bool {
    get {return _privacy ?? false}
    set {_privacy = newValue}
  }
  /// Returns true if `privacy` has been explicitly set.
  public var hasPrivacy: Bool {return self._privacy != nil}
  /// Clears the value of `privacy`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacy() {self._privacy = nil}

  public var marketing: Bool {
    get {return _marketing ?? false}
    set {_marketing = newValue}
  }
  /// Returns true if `marketing` has been explicitly set.
  public var hasMarketing: Bool {return self._marketing != nil}
  /// Clears the value of `marketing`. Subsequent reads from it will return its default value.
  public mutating func clearMarketing() {self._marketing = nil}

  public var from: String {
    get {return _from ?? String()}
    set {_from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  public var hasFrom: Bool {return self._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  public mutating func clearFrom() {self._from = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _tos: Bool? = nil
  fileprivate var _privacy: Bool? = nil
  fileprivate var _marketing: Bool? = nil
  fileprivate var _from: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stremio_Core_Types_Profile: @unchecked Sendable {}
extension Stremio_Core_Types_Profile.FrameRateMatchingStrategy: @unchecked Sendable {}
extension Stremio_Core_Types_Profile.Settings: @unchecked Sendable {}
extension Stremio_Core_Types_Auth: @unchecked Sendable {}
extension Stremio_Core_Types_User: @unchecked Sendable {}
extension Stremio_Core_Types_GDPRConsent: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stremio.core.types"

extension Stremio_Core_Types_Profile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Profile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    3: .same(proto: "settings"),
  ]

  public var isInitialized: Bool {
    if self._settings == nil {return false}
    if let v = self._auth, !v.isInitialized {return false}
    if let v = self._settings, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._auth) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._settings) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._auth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._settings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_Profile, rhs: Stremio_Core_Types_Profile) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._settings != rhs._settings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_Profile.FrameRateMatchingStrategy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Disabled"),
    1: .same(proto: "FrameRateOnly"),
    2: .same(proto: "FrameRateAndResolution"),
  ]
}

extension Stremio_Core_Types_Profile.Settings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Types_Profile.protoMessageName + ".Settings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "interface_language"),
    2: .standard(proto: "streaming_server_url"),
    3: .standard(proto: "binge_watching"),
    4: .standard(proto: "play_in_background"),
    6: .standard(proto: "hardware_decoding"),
    7: .standard(proto: "audio_passthrough"),
    8: .standard(proto: "audio_language"),
    9: .standard(proto: "subtitles_language"),
    10: .standard(proto: "subtitles_size"),
    11: .standard(proto: "subtitles_font"),
    12: .standard(proto: "subtitles_bold"),
    13: .standard(proto: "subtitles_offset"),
    14: .standard(proto: "subtitles_text_color"),
    15: .standard(proto: "subtitles_background_color"),
    16: .standard(proto: "subtitles_outline_color"),
    17: .standard(proto: "subtitles_opacity"),
    18: .standard(proto: "esc_exit_fullscreen"),
    19: .standard(proto: "seek_time_duration"),
    20: .standard(proto: "seek_short_time_duration"),
    21: .standard(proto: "pause_on_minimize"),
    22: .standard(proto: "secondary_audio_language"),
    24: .standard(proto: "secondary_subtitles_language"),
    25: .standard(proto: "player_type"),
    26: .standard(proto: "frame_rate_matching_strategy"),
    27: .standard(proto: "next_video_notification_duration"),
    28: .standard(proto: "surround_sound"),
  ]

  fileprivate class _StorageClass {
    var _interfaceLanguage: String? = nil
    var _streamingServerURL: String? = nil
    var _bingeWatching: Bool? = nil
    var _playInBackground: Bool? = nil
    var _hardwareDecoding: Bool? = nil
    var _audioPassthrough: Bool? = nil
    var _audioLanguage: String? = nil
    var _subtitlesLanguage: String? = nil
    var _subtitlesSize: Int32? = nil
    var _subtitlesFont: String? = nil
    var _subtitlesBold: Bool? = nil
    var _subtitlesOffset: Int32? = nil
    var _subtitlesTextColor: String? = nil
    var _subtitlesBackgroundColor: String? = nil
    var _subtitlesOutlineColor: String? = nil
    var _subtitlesOpacity: Int32? = nil
    var _escExitFullscreen: Bool? = nil
    var _seekTimeDuration: Int64? = nil
    var _seekShortTimeDuration: Int64? = nil
    var _pauseOnMinimize: Bool? = nil
    var _secondaryAudioLanguage: String? = nil
    var _secondarySubtitlesLanguage: String? = nil
    var _playerType: String? = nil
    var _frameRateMatchingStrategy: Stremio_Core_Types_Profile.FrameRateMatchingStrategy? = nil
    var _nextVideoNotificationDuration: Int64? = nil
    var _surroundSound: Bool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _interfaceLanguage = source._interfaceLanguage
      _streamingServerURL = source._streamingServerURL
      _bingeWatching = source._bingeWatching
      _playInBackground = source._playInBackground
      _hardwareDecoding = source._hardwareDecoding
      _audioPassthrough = source._audioPassthrough
      _audioLanguage = source._audioLanguage
      _subtitlesLanguage = source._subtitlesLanguage
      _subtitlesSize = source._subtitlesSize
      _subtitlesFont = source._subtitlesFont
      _subtitlesBold = source._subtitlesBold
      _subtitlesOffset = source._subtitlesOffset
      _subtitlesTextColor = source._subtitlesTextColor
      _subtitlesBackgroundColor = source._subtitlesBackgroundColor
      _subtitlesOutlineColor = source._subtitlesOutlineColor
      _subtitlesOpacity = source._subtitlesOpacity
      _escExitFullscreen = source._escExitFullscreen
      _seekTimeDuration = source._seekTimeDuration
      _seekShortTimeDuration = source._seekShortTimeDuration
      _pauseOnMinimize = source._pauseOnMinimize
      _secondaryAudioLanguage = source._secondaryAudioLanguage
      _secondarySubtitlesLanguage = source._secondarySubtitlesLanguage
      _playerType = source._playerType
      _frameRateMatchingStrategy = source._frameRateMatchingStrategy
      _nextVideoNotificationDuration = source._nextVideoNotificationDuration
      _surroundSound = source._surroundSound
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._interfaceLanguage == nil {return false}
      if _storage._streamingServerURL == nil {return false}
      if _storage._bingeWatching == nil {return false}
      if _storage._playInBackground == nil {return false}
      if _storage._hardwareDecoding == nil {return false}
      if _storage._audioPassthrough == nil {return false}
      if _storage._audioLanguage == nil {return false}
      if _storage._subtitlesLanguage == nil {return false}
      if _storage._subtitlesSize == nil {return false}
      if _storage._subtitlesFont == nil {return false}
      if _storage._subtitlesBold == nil {return false}
      if _storage._subtitlesOffset == nil {return false}
      if _storage._subtitlesTextColor == nil {return false}
      if _storage._subtitlesBackgroundColor == nil {return false}
      if _storage._subtitlesOutlineColor == nil {return false}
      if _storage._subtitlesOpacity == nil {return false}
      if _storage._escExitFullscreen == nil {return false}
      if _storage._seekTimeDuration == nil {return false}
      if _storage._seekShortTimeDuration == nil {return false}
      if _storage._pauseOnMinimize == nil {return false}
      if _storage._frameRateMatchingStrategy == nil {return false}
      if _storage._nextVideoNotificationDuration == nil {return false}
      if _storage._surroundSound == nil {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._interfaceLanguage) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._streamingServerURL) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._bingeWatching) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._playInBackground) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._hardwareDecoding) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._audioPassthrough) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._audioLanguage) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._subtitlesLanguage) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._subtitlesSize) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._subtitlesFont) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._subtitlesBold) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._subtitlesOffset) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._subtitlesTextColor) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._subtitlesBackgroundColor) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._subtitlesOutlineColor) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._subtitlesOpacity) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._escExitFullscreen) }()
        case 19: try { try decoder.decodeSingularInt64Field(value: &_storage._seekTimeDuration) }()
        case 20: try { try decoder.decodeSingularInt64Field(value: &_storage._seekShortTimeDuration) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._pauseOnMinimize) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._secondaryAudioLanguage) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._secondarySubtitlesLanguage) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._playerType) }()
        case 26: try { try decoder.decodeSingularEnumField(value: &_storage._frameRateMatchingStrategy) }()
        case 27: try { try decoder.decodeSingularInt64Field(value: &_storage._nextVideoNotificationDuration) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._surroundSound) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._interfaceLanguage {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._streamingServerURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._bingeWatching {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._playInBackground {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._hardwareDecoding {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._audioPassthrough {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._audioLanguage {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._subtitlesLanguage {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._subtitlesSize {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._subtitlesFont {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._subtitlesBold {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._subtitlesOffset {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._subtitlesTextColor {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._subtitlesBackgroundColor {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._subtitlesOutlineColor {
        try visitor.visitSingularStringField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._subtitlesOpacity {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._escExitFullscreen {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._seekTimeDuration {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._seekShortTimeDuration {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._pauseOnMinimize {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._secondaryAudioLanguage {
        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._secondarySubtitlesLanguage {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._playerType {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._frameRateMatchingStrategy {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._nextVideoNotificationDuration {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._surroundSound {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 28)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_Profile.Settings, rhs: Stremio_Core_Types_Profile.Settings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._interfaceLanguage != rhs_storage._interfaceLanguage {return false}
        if _storage._streamingServerURL != rhs_storage._streamingServerURL {return false}
        if _storage._bingeWatching != rhs_storage._bingeWatching {return false}
        if _storage._playInBackground != rhs_storage._playInBackground {return false}
        if _storage._hardwareDecoding != rhs_storage._hardwareDecoding {return false}
        if _storage._audioPassthrough != rhs_storage._audioPassthrough {return false}
        if _storage._audioLanguage != rhs_storage._audioLanguage {return false}
        if _storage._subtitlesLanguage != rhs_storage._subtitlesLanguage {return false}
        if _storage._subtitlesSize != rhs_storage._subtitlesSize {return false}
        if _storage._subtitlesFont != rhs_storage._subtitlesFont {return false}
        if _storage._subtitlesBold != rhs_storage._subtitlesBold {return false}
        if _storage._subtitlesOffset != rhs_storage._subtitlesOffset {return false}
        if _storage._subtitlesTextColor != rhs_storage._subtitlesTextColor {return false}
        if _storage._subtitlesBackgroundColor != rhs_storage._subtitlesBackgroundColor {return false}
        if _storage._subtitlesOutlineColor != rhs_storage._subtitlesOutlineColor {return false}
        if _storage._subtitlesOpacity != rhs_storage._subtitlesOpacity {return false}
        if _storage._escExitFullscreen != rhs_storage._escExitFullscreen {return false}
        if _storage._seekTimeDuration != rhs_storage._seekTimeDuration {return false}
        if _storage._seekShortTimeDuration != rhs_storage._seekShortTimeDuration {return false}
        if _storage._pauseOnMinimize != rhs_storage._pauseOnMinimize {return false}
        if _storage._secondaryAudioLanguage != rhs_storage._secondaryAudioLanguage {return false}
        if _storage._secondarySubtitlesLanguage != rhs_storage._secondarySubtitlesLanguage {return false}
        if _storage._playerType != rhs_storage._playerType {return false}
        if _storage._frameRateMatchingStrategy != rhs_storage._frameRateMatchingStrategy {return false}
        if _storage._nextVideoNotificationDuration != rhs_storage._nextVideoNotificationDuration {return false}
        if _storage._surroundSound != rhs_storage._surroundSound {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_Auth: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Auth"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "user"),
  ]

  public var isInitialized: Bool {
    if self._key == nil {return false}
    if self._user == nil {return false}
    if let v = self._user, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._key) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._key {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_Auth, rhs: Stremio_Core_Types_Auth) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs._user != rhs._user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".User"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "email"),
    3: .standard(proto: "fb_id"),
    4: .same(proto: "avatar"),
    5: .standard(proto: "gdpr_consent"),
    6: .standard(proto: "date_registered"),
    7: .standard(proto: "last_modified"),
    8: .standard(proto: "premium_expire"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._email == nil {return false}
    if self._gdprConsent == nil {return false}
    if self._dateRegistered == nil {return false}
    if self._lastModified == nil {return false}
    if let v = self._gdprConsent, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._email) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._fbID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._avatar) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._gdprConsent) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._dateRegistered) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._lastModified) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._premiumExpire) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._email {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._fbID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._avatar {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._gdprConsent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._dateRegistered {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._lastModified {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._premiumExpire {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_User, rhs: Stremio_Core_Types_User) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._email != rhs._email {return false}
    if lhs._fbID != rhs._fbID {return false}
    if lhs._avatar != rhs._avatar {return false}
    if lhs._gdprConsent != rhs._gdprConsent {return false}
    if lhs._dateRegistered != rhs._dateRegistered {return false}
    if lhs._lastModified != rhs._lastModified {return false}
    if lhs._premiumExpire != rhs._premiumExpire {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Types_GDPRConsent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GDPRConsent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tos"),
    2: .same(proto: "privacy"),
    3: .same(proto: "marketing"),
    4: .same(proto: "from"),
  ]

  public var isInitialized: Bool {
    if self._tos == nil {return false}
    if self._privacy == nil {return false}
    if self._marketing == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._tos) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._privacy) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._marketing) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._from) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tos {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._privacy {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._marketing {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._from {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Types_GDPRConsent, rhs: Stremio_Core_Types_GDPRConsent) -> Bool {
    if lhs._tos != rhs._tos {return false}
    if lhs._privacy != rhs._privacy {return false}
    if lhs._marketing != rhs._marketing {return false}
    if lhs._from != rhs._from {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
