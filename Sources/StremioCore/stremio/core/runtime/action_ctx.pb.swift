// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stremio/core/runtime/action_ctx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Stremio_Core_Runtime_ActionCtx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var args: Stremio_Core_Runtime_ActionCtx.OneOf_Args? = nil

  public var authenticate: Stremio_Core_Types_AuthRequest {
    get {
      if case .authenticate(let v)? = args {return v}
      return Stremio_Core_Types_AuthRequest()
    }
    set {args = .authenticate(newValue)}
  }

  public var logout: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .logout(let v)? = args {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {args = .logout(newValue)}
  }

  public var installAddon: Stremio_Core_Types_Descriptor {
    get {
      if case .installAddon(let v)? = args {return v}
      return Stremio_Core_Types_Descriptor()
    }
    set {args = .installAddon(newValue)}
  }

  public var installTraktAddon: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .installTraktAddon(let v)? = args {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {args = .installTraktAddon(newValue)}
  }

  public var logoutTrakt: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .logoutTrakt(let v)? = args {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {args = .logoutTrakt(newValue)}
  }

  public var upgradeAddon: Stremio_Core_Types_Descriptor {
    get {
      if case .upgradeAddon(let v)? = args {return v}
      return Stremio_Core_Types_Descriptor()
    }
    set {args = .upgradeAddon(newValue)}
  }

  public var uninstallAddon: Stremio_Core_Types_Descriptor {
    get {
      if case .uninstallAddon(let v)? = args {return v}
      return Stremio_Core_Types_Descriptor()
    }
    set {args = .uninstallAddon(newValue)}
  }

  public var updateSettings: Stremio_Core_Types_Profile.Settings {
    get {
      if case .updateSettings(let v)? = args {return v}
      return Stremio_Core_Types_Profile.Settings()
    }
    set {args = .updateSettings(newValue)}
  }

  public var addToLibrary: Stremio_Core_Types_MetaItemPreview {
    get {
      if case .addToLibrary(let v)? = args {return v}
      return Stremio_Core_Types_MetaItemPreview()
    }
    set {args = .addToLibrary(newValue)}
  }

  public var removeFromLibrary: String {
    get {
      if case .removeFromLibrary(let v)? = args {return v}
      return String()
    }
    set {args = .removeFromLibrary(newValue)}
  }

  public var rewindLibraryItem: String {
    get {
      if case .rewindLibraryItem(let v)? = args {return v}
      return String()
    }
    set {args = .rewindLibraryItem(newValue)}
  }

  public var libraryItemMarkAsWatched: Stremio_Core_Runtime_ActionCtx.LibraryItemMarkAsWatched {
    get {
      if case .libraryItemMarkAsWatched(let v)? = args {return v}
      return Stremio_Core_Runtime_ActionCtx.LibraryItemMarkAsWatched()
    }
    set {args = .libraryItemMarkAsWatched(newValue)}
  }

  public var toggleLibraryItemNotifications: Stremio_Core_Runtime_ActionCtx.LibraryItemToggle {
    get {
      if case .toggleLibraryItemNotifications(let v)? = args {return v}
      return Stremio_Core_Runtime_ActionCtx.LibraryItemToggle()
    }
    set {args = .toggleLibraryItemNotifications(newValue)}
  }

  public var dismissNotificationItem: String {
    get {
      if case .dismissNotificationItem(let v)? = args {return v}
      return String()
    }
    set {args = .dismissNotificationItem(newValue)}
  }

  public var pushUserToApi: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .pushUserToApi(let v)? = args {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {args = .pushUserToApi(newValue)}
  }

  public var pullUserFromApi: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .pullUserFromApi(let v)? = args {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {args = .pullUserFromApi(newValue)}
  }

  public var pushAddonsToApi: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .pushAddonsToApi(let v)? = args {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {args = .pushAddonsToApi(newValue)}
  }

  public var pullAddonsFromApi: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .pullAddonsFromApi(let v)? = args {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {args = .pullAddonsFromApi(newValue)}
  }

  public var syncLibraryWithApi: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .syncLibraryWithApi(let v)? = args {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {args = .syncLibraryWithApi(newValue)}
  }

  public var pullNotifications: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .pullNotifications(let v)? = args {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {args = .pullNotifications(newValue)}
  }

  public var getEvents: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .getEvents(let v)? = args {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {args = .getEvents(newValue)}
  }

  public var dismissEvent: String {
    get {
      if case .dismissEvent(let v)? = args {return v}
      return String()
    }
    set {args = .dismissEvent(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Args: Equatable {
    case authenticate(Stremio_Core_Types_AuthRequest)
    case logout(SwiftProtobuf.Google_Protobuf_Empty)
    case installAddon(Stremio_Core_Types_Descriptor)
    case installTraktAddon(SwiftProtobuf.Google_Protobuf_Empty)
    case logoutTrakt(SwiftProtobuf.Google_Protobuf_Empty)
    case upgradeAddon(Stremio_Core_Types_Descriptor)
    case uninstallAddon(Stremio_Core_Types_Descriptor)
    case updateSettings(Stremio_Core_Types_Profile.Settings)
    case addToLibrary(Stremio_Core_Types_MetaItemPreview)
    case removeFromLibrary(String)
    case rewindLibraryItem(String)
    case libraryItemMarkAsWatched(Stremio_Core_Runtime_ActionCtx.LibraryItemMarkAsWatched)
    case toggleLibraryItemNotifications(Stremio_Core_Runtime_ActionCtx.LibraryItemToggle)
    case dismissNotificationItem(String)
    case pushUserToApi(SwiftProtobuf.Google_Protobuf_Empty)
    case pullUserFromApi(SwiftProtobuf.Google_Protobuf_Empty)
    case pushAddonsToApi(SwiftProtobuf.Google_Protobuf_Empty)
    case pullAddonsFromApi(SwiftProtobuf.Google_Protobuf_Empty)
    case syncLibraryWithApi(SwiftProtobuf.Google_Protobuf_Empty)
    case pullNotifications(SwiftProtobuf.Google_Protobuf_Empty)
    case getEvents(SwiftProtobuf.Google_Protobuf_Empty)
    case dismissEvent(String)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .authenticate: return {
        guard case .authenticate(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .installAddon: return {
        guard case .installAddon(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .upgradeAddon: return {
        guard case .upgradeAddon(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .uninstallAddon: return {
        guard case .uninstallAddon(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .updateSettings: return {
        guard case .updateSettings(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .addToLibrary: return {
        guard case .addToLibrary(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .libraryItemMarkAsWatched: return {
        guard case .libraryItemMarkAsWatched(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .toggleLibraryItemNotifications: return {
        guard case .toggleLibraryItemNotifications(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      default: return true
      }
    }

  #if !swift(>=4.1)
    public static func ==(lhs: Stremio_Core_Runtime_ActionCtx.OneOf_Args, rhs: Stremio_Core_Runtime_ActionCtx.OneOf_Args) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.authenticate, .authenticate): return {
        guard case .authenticate(let l) = lhs, case .authenticate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.logout, .logout): return {
        guard case .logout(let l) = lhs, case .logout(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.installAddon, .installAddon): return {
        guard case .installAddon(let l) = lhs, case .installAddon(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.installTraktAddon, .installTraktAddon): return {
        guard case .installTraktAddon(let l) = lhs, case .installTraktAddon(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.logoutTrakt, .logoutTrakt): return {
        guard case .logoutTrakt(let l) = lhs, case .logoutTrakt(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.upgradeAddon, .upgradeAddon): return {
        guard case .upgradeAddon(let l) = lhs, case .upgradeAddon(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.uninstallAddon, .uninstallAddon): return {
        guard case .uninstallAddon(let l) = lhs, case .uninstallAddon(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.updateSettings, .updateSettings): return {
        guard case .updateSettings(let l) = lhs, case .updateSettings(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.addToLibrary, .addToLibrary): return {
        guard case .addToLibrary(let l) = lhs, case .addToLibrary(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.removeFromLibrary, .removeFromLibrary): return {
        guard case .removeFromLibrary(let l) = lhs, case .removeFromLibrary(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.rewindLibraryItem, .rewindLibraryItem): return {
        guard case .rewindLibraryItem(let l) = lhs, case .rewindLibraryItem(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.libraryItemMarkAsWatched, .libraryItemMarkAsWatched): return {
        guard case .libraryItemMarkAsWatched(let l) = lhs, case .libraryItemMarkAsWatched(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.toggleLibraryItemNotifications, .toggleLibraryItemNotifications): return {
        guard case .toggleLibraryItemNotifications(let l) = lhs, case .toggleLibraryItemNotifications(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dismissNotificationItem, .dismissNotificationItem): return {
        guard case .dismissNotificationItem(let l) = lhs, case .dismissNotificationItem(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pushUserToApi, .pushUserToApi): return {
        guard case .pushUserToApi(let l) = lhs, case .pushUserToApi(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pullUserFromApi, .pullUserFromApi): return {
        guard case .pullUserFromApi(let l) = lhs, case .pullUserFromApi(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pushAddonsToApi, .pushAddonsToApi): return {
        guard case .pushAddonsToApi(let l) = lhs, case .pushAddonsToApi(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pullAddonsFromApi, .pullAddonsFromApi): return {
        guard case .pullAddonsFromApi(let l) = lhs, case .pullAddonsFromApi(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.syncLibraryWithApi, .syncLibraryWithApi): return {
        guard case .syncLibraryWithApi(let l) = lhs, case .syncLibraryWithApi(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pullNotifications, .pullNotifications): return {
        guard case .pullNotifications(let l) = lhs, case .pullNotifications(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getEvents, .getEvents): return {
        guard case .getEvents(let l) = lhs, case .getEvents(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dismissEvent, .dismissEvent): return {
        guard case .dismissEvent(let l) = lhs, case .dismissEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct LibraryItemToggle {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    public var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    public mutating func clearID() {self._id = nil}

    public var toggle: Bool {
      get {return _toggle ?? false}
      set {_toggle = newValue}
    }
    /// Returns true if `toggle` has been explicitly set.
    public var hasToggle: Bool {return self._toggle != nil}
    /// Clears the value of `toggle`. Subsequent reads from it will return its default value.
    public mutating func clearToggle() {self._toggle = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _id: String? = nil
    fileprivate var _toggle: Bool? = nil
  }

  public struct LibraryItemMarkAsWatched {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    public var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    public mutating func clearID() {self._id = nil}

    public var isWatched: Bool {
      get {return _isWatched ?? false}
      set {_isWatched = newValue}
    }
    /// Returns true if `isWatched` has been explicitly set.
    public var hasIsWatched: Bool {return self._isWatched != nil}
    /// Clears the value of `isWatched`. Subsequent reads from it will return its default value.
    public mutating func clearIsWatched() {self._isWatched = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _id: String? = nil
    fileprivate var _isWatched: Bool? = nil
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stremio_Core_Runtime_ActionCtx: @unchecked Sendable {}
extension Stremio_Core_Runtime_ActionCtx.OneOf_Args: @unchecked Sendable {}
extension Stremio_Core_Runtime_ActionCtx.LibraryItemToggle: @unchecked Sendable {}
extension Stremio_Core_Runtime_ActionCtx.LibraryItemMarkAsWatched: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stremio.core.runtime"

extension Stremio_Core_Runtime_ActionCtx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActionCtx"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authenticate"),
    2: .same(proto: "logout"),
    3: .standard(proto: "install_addon"),
    4: .standard(proto: "install_trakt_addon"),
    5: .standard(proto: "logout_trakt"),
    6: .standard(proto: "upgrade_addon"),
    7: .standard(proto: "uninstall_addon"),
    8: .standard(proto: "update_settings"),
    9: .standard(proto: "add_to_library"),
    10: .standard(proto: "remove_from_library"),
    11: .standard(proto: "rewind_library_item"),
    12: .standard(proto: "library_item_mark_as_watched"),
    13: .standard(proto: "toggle_library_item_notifications"),
    14: .standard(proto: "dismiss_notification_item"),
    15: .standard(proto: "push_user_to_api"),
    16: .standard(proto: "pull_user_from_api"),
    17: .standard(proto: "push_addons_to_api"),
    18: .standard(proto: "pull_addons_from_api"),
    19: .standard(proto: "sync_library_with_api"),
    20: .standard(proto: "pull_notifications"),
    21: .standard(proto: "get_events"),
    22: .standard(proto: "dismiss_event"),
  ]

  public var isInitialized: Bool {
    if let v = self.args, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Stremio_Core_Types_AuthRequest?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .authenticate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .authenticate(v)
        }
      }()
      case 2: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .logout(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .logout(v)
        }
      }()
      case 3: try {
        var v: Stremio_Core_Types_Descriptor?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .installAddon(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .installAddon(v)
        }
      }()
      case 4: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .installTraktAddon(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .installTraktAddon(v)
        }
      }()
      case 5: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .logoutTrakt(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .logoutTrakt(v)
        }
      }()
      case 6: try {
        var v: Stremio_Core_Types_Descriptor?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .upgradeAddon(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .upgradeAddon(v)
        }
      }()
      case 7: try {
        var v: Stremio_Core_Types_Descriptor?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .uninstallAddon(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .uninstallAddon(v)
        }
      }()
      case 8: try {
        var v: Stremio_Core_Types_Profile.Settings?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .updateSettings(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .updateSettings(v)
        }
      }()
      case 9: try {
        var v: Stremio_Core_Types_MetaItemPreview?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .addToLibrary(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .addToLibrary(v)
        }
      }()
      case 10: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.args != nil {try decoder.handleConflictingOneOf()}
          self.args = .removeFromLibrary(v)
        }
      }()
      case 11: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.args != nil {try decoder.handleConflictingOneOf()}
          self.args = .rewindLibraryItem(v)
        }
      }()
      case 12: try {
        var v: Stremio_Core_Runtime_ActionCtx.LibraryItemMarkAsWatched?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .libraryItemMarkAsWatched(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .libraryItemMarkAsWatched(v)
        }
      }()
      case 13: try {
        var v: Stremio_Core_Runtime_ActionCtx.LibraryItemToggle?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .toggleLibraryItemNotifications(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .toggleLibraryItemNotifications(v)
        }
      }()
      case 14: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.args != nil {try decoder.handleConflictingOneOf()}
          self.args = .dismissNotificationItem(v)
        }
      }()
      case 15: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .pushUserToApi(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .pushUserToApi(v)
        }
      }()
      case 16: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .pullUserFromApi(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .pullUserFromApi(v)
        }
      }()
      case 17: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .pushAddonsToApi(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .pushAddonsToApi(v)
        }
      }()
      case 18: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .pullAddonsFromApi(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .pullAddonsFromApi(v)
        }
      }()
      case 19: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .syncLibraryWithApi(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .syncLibraryWithApi(v)
        }
      }()
      case 20: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .pullNotifications(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .pullNotifications(v)
        }
      }()
      case 21: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .getEvents(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .getEvents(v)
        }
      }()
      case 22: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.args != nil {try decoder.handleConflictingOneOf()}
          self.args = .dismissEvent(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.args {
    case .authenticate?: try {
      guard case .authenticate(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .logout?: try {
      guard case .logout(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .installAddon?: try {
      guard case .installAddon(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .installTraktAddon?: try {
      guard case .installTraktAddon(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .logoutTrakt?: try {
      guard case .logoutTrakt(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .upgradeAddon?: try {
      guard case .upgradeAddon(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .uninstallAddon?: try {
      guard case .uninstallAddon(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .updateSettings?: try {
      guard case .updateSettings(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .addToLibrary?: try {
      guard case .addToLibrary(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .removeFromLibrary?: try {
      guard case .removeFromLibrary(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    }()
    case .rewindLibraryItem?: try {
      guard case .rewindLibraryItem(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    }()
    case .libraryItemMarkAsWatched?: try {
      guard case .libraryItemMarkAsWatched(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .toggleLibraryItemNotifications?: try {
      guard case .toggleLibraryItemNotifications(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .dismissNotificationItem?: try {
      guard case .dismissNotificationItem(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 14)
    }()
    case .pushUserToApi?: try {
      guard case .pushUserToApi(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .pullUserFromApi?: try {
      guard case .pullUserFromApi(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .pushAddonsToApi?: try {
      guard case .pushAddonsToApi(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .pullAddonsFromApi?: try {
      guard case .pullAddonsFromApi(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }()
    case .syncLibraryWithApi?: try {
      guard case .syncLibraryWithApi(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case .pullNotifications?: try {
      guard case .pullNotifications(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }()
    case .getEvents?: try {
      guard case .getEvents(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case .dismissEvent?: try {
      guard case .dismissEvent(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 22)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Runtime_ActionCtx, rhs: Stremio_Core_Runtime_ActionCtx) -> Bool {
    if lhs.args != rhs.args {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Runtime_ActionCtx.LibraryItemToggle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Runtime_ActionCtx.protoMessageName + ".LibraryItemToggle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "toggle"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._toggle == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._toggle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._toggle {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Runtime_ActionCtx.LibraryItemToggle, rhs: Stremio_Core_Runtime_ActionCtx.LibraryItemToggle) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._toggle != rhs._toggle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Runtime_ActionCtx.LibraryItemMarkAsWatched: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Runtime_ActionCtx.protoMessageName + ".LibraryItemMarkAsWatched"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "is_watched"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._isWatched == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._isWatched) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._isWatched {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Runtime_ActionCtx.LibraryItemMarkAsWatched, rhs: Stremio_Core_Runtime_ActionCtx.LibraryItemMarkAsWatched) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._isWatched != rhs._isWatched {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
