// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stremio/core/runtime/action_streaming_server.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Stremio_Core_Runtime_ActionStreamingServer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var args: Stremio_Core_Runtime_ActionStreamingServer.OneOf_Args? = nil

  public var reload: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .reload(let v)? = args {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {args = .reload(newValue)}
  }

  public var updateSettings: Stremio_Core_Models_StreamingServer.Settings {
    get {
      if case .updateSettings(let v)? = args {return v}
      return Stremio_Core_Models_StreamingServer.Settings()
    }
    set {args = .updateSettings(newValue)}
  }

  public var createTorrent: Stremio_Core_Runtime_CreateTorrentArgs {
    get {
      if case .createTorrent(let v)? = args {return v}
      return Stremio_Core_Runtime_CreateTorrentArgs()
    }
    set {args = .createTorrent(newValue)}
  }

  public var getStatistics: Stremio_Core_Models_StreamingServer.StatisticsRequest {
    get {
      if case .getStatistics(let v)? = args {return v}
      return Stremio_Core_Models_StreamingServer.StatisticsRequest()
    }
    set {args = .getStatistics(newValue)}
  }

  public var playOnDevice: Stremio_Core_Runtime_PlayOnDeviceArgs {
    get {
      if case .playOnDevice(let v)? = args {return v}
      return Stremio_Core_Runtime_PlayOnDeviceArgs()
    }
    set {args = .playOnDevice(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Args: Equatable {
    case reload(SwiftProtobuf.Google_Protobuf_Empty)
    case updateSettings(Stremio_Core_Models_StreamingServer.Settings)
    case createTorrent(Stremio_Core_Runtime_CreateTorrentArgs)
    case getStatistics(Stremio_Core_Models_StreamingServer.StatisticsRequest)
    case playOnDevice(Stremio_Core_Runtime_PlayOnDeviceArgs)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .updateSettings: return {
        guard case .updateSettings(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .getStatistics: return {
        guard case .getStatistics(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .playOnDevice: return {
        guard case .playOnDevice(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      default: return true
      }
    }

  #if !swift(>=4.1)
    public static func ==(lhs: Stremio_Core_Runtime_ActionStreamingServer.OneOf_Args, rhs: Stremio_Core_Runtime_ActionStreamingServer.OneOf_Args) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.reload, .reload): return {
        guard case .reload(let l) = lhs, case .reload(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.updateSettings, .updateSettings): return {
        guard case .updateSettings(let l) = lhs, case .updateSettings(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.createTorrent, .createTorrent): return {
        guard case .createTorrent(let l) = lhs, case .createTorrent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getStatistics, .getStatistics): return {
        guard case .getStatistics(let l) = lhs, case .getStatistics(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.playOnDevice, .playOnDevice): return {
        guard case .playOnDevice(let l) = lhs, case .playOnDevice(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Stremio_Core_Runtime_CreateTorrentArgs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var args: Stremio_Core_Runtime_CreateTorrentArgs.OneOf_Args? = nil

  public var file: Data {
    get {
      if case .file(let v)? = args {return v}
      return Data()
    }
    set {args = .file(newValue)}
  }

  public var magnet: String {
    get {
      if case .magnet(let v)? = args {return v}
      return String()
    }
    set {args = .magnet(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Args: Equatable {
    case file(Data)
    case magnet(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Stremio_Core_Runtime_CreateTorrentArgs.OneOf_Args, rhs: Stremio_Core_Runtime_CreateTorrentArgs.OneOf_Args) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.file, .file): return {
        guard case .file(let l) = lhs, case .file(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.magnet, .magnet): return {
        guard case .magnet(let l) = lhs, case .magnet(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Stremio_Core_Runtime_PlayOnDeviceArgs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var device: String {
    get {return _device ?? String()}
    set {_device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  public var hasDevice: Bool {return self._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  public mutating func clearDevice() {self._device = nil}

  public var source: String {
    get {return _source ?? String()}
    set {_source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return self._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  public mutating func clearSource() {self._source = nil}

  public var time: Int64 {
    get {return _time ?? 0}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  public var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  public mutating func clearTime() {self._time = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _device: String? = nil
  fileprivate var _source: String? = nil
  fileprivate var _time: Int64? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stremio_Core_Runtime_ActionStreamingServer: @unchecked Sendable {}
extension Stremio_Core_Runtime_ActionStreamingServer.OneOf_Args: @unchecked Sendable {}
extension Stremio_Core_Runtime_CreateTorrentArgs: @unchecked Sendable {}
extension Stremio_Core_Runtime_CreateTorrentArgs.OneOf_Args: @unchecked Sendable {}
extension Stremio_Core_Runtime_PlayOnDeviceArgs: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stremio.core.runtime"

extension Stremio_Core_Runtime_ActionStreamingServer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActionStreamingServer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reload"),
    2: .standard(proto: "update_settings"),
    3: .standard(proto: "create_torrent"),
    4: .standard(proto: "get_statistics"),
    5: .standard(proto: "play_on_device"),
  ]

  public var isInitialized: Bool {
    if let v = self.args, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .reload(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .reload(v)
        }
      }()
      case 2: try {
        var v: Stremio_Core_Models_StreamingServer.Settings?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .updateSettings(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .updateSettings(v)
        }
      }()
      case 3: try {
        var v: Stremio_Core_Runtime_CreateTorrentArgs?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .createTorrent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .createTorrent(v)
        }
      }()
      case 4: try {
        var v: Stremio_Core_Models_StreamingServer.StatisticsRequest?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .getStatistics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .getStatistics(v)
        }
      }()
      case 5: try {
        var v: Stremio_Core_Runtime_PlayOnDeviceArgs?
        var hadOneofValue = false
        if let current = self.args {
          hadOneofValue = true
          if case .playOnDevice(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.args = .playOnDevice(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.args {
    case .reload?: try {
      guard case .reload(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .updateSettings?: try {
      guard case .updateSettings(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .createTorrent?: try {
      guard case .createTorrent(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .getStatistics?: try {
      guard case .getStatistics(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .playOnDevice?: try {
      guard case .playOnDevice(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Runtime_ActionStreamingServer, rhs: Stremio_Core_Runtime_ActionStreamingServer) -> Bool {
    if lhs.args != rhs.args {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Runtime_CreateTorrentArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateTorrentArgs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "file"),
    2: .same(proto: "magnet"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.args != nil {try decoder.handleConflictingOneOf()}
          self.args = .file(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.args != nil {try decoder.handleConflictingOneOf()}
          self.args = .magnet(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.args {
    case .file?: try {
      guard case .file(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }()
    case .magnet?: try {
      guard case .magnet(let v)? = self.args else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Runtime_CreateTorrentArgs, rhs: Stremio_Core_Runtime_CreateTorrentArgs) -> Bool {
    if lhs.args != rhs.args {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Runtime_PlayOnDeviceArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayOnDeviceArgs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "device"),
    2: .same(proto: "source"),
    3: .same(proto: "time"),
  ]

  public var isInitialized: Bool {
    if self._device == nil {return false}
    if self._source == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._device) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._source) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self._time) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._device {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._source {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._time {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Runtime_PlayOnDeviceArgs, rhs: Stremio_Core_Runtime_PlayOnDeviceArgs) -> Bool {
    if lhs._device != rhs._device {return false}
    if lhs._source != rhs._source {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
