// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stremio/core/models/streaming_server.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Stremio_Core_Models_StreamingServer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var selected: Stremio_Core_Models_StreamingServer.Selected {
    get {return _storage._selected ?? Stremio_Core_Models_StreamingServer.Selected()}
    set {_uniqueStorage()._selected = newValue}
  }
  /// Returns true if `selected` has been explicitly set.
  public var hasSelected: Bool {return _storage._selected != nil}
  /// Clears the value of `selected`. Subsequent reads from it will return its default value.
  public mutating func clearSelected() {_uniqueStorage()._selected = nil}

  public var baseURL: String {
    get {return _storage._baseURL ?? String()}
    set {_uniqueStorage()._baseURL = newValue}
  }
  /// Returns true if `baseURL` has been explicitly set.
  public var hasBaseURL: Bool {return _storage._baseURL != nil}
  /// Clears the value of `baseURL`. Subsequent reads from it will return its default value.
  public mutating func clearBaseURL() {_uniqueStorage()._baseURL = nil}

  public var remoteURL: String {
    get {return _storage._remoteURL ?? String()}
    set {_uniqueStorage()._remoteURL = newValue}
  }
  /// Returns true if `remoteURL` has been explicitly set.
  public var hasRemoteURL: Bool {return _storage._remoteURL != nil}
  /// Clears the value of `remoteURL`. Subsequent reads from it will return its default value.
  public mutating func clearRemoteURL() {_uniqueStorage()._remoteURL = nil}

  public var settings: Stremio_Core_Models_LoadableSettings {
    get {return _storage._settings ?? Stremio_Core_Models_LoadableSettings()}
    set {_uniqueStorage()._settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  public var hasSettings: Bool {return _storage._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  public mutating func clearSettings() {_uniqueStorage()._settings = nil}

  public var torrent: Stremio_Core_Models_LoadableTorrent {
    get {return _storage._torrent ?? Stremio_Core_Models_LoadableTorrent()}
    set {_uniqueStorage()._torrent = newValue}
  }
  /// Returns true if `torrent` has been explicitly set.
  public var hasTorrent: Bool {return _storage._torrent != nil}
  /// Clears the value of `torrent`. Subsequent reads from it will return its default value.
  public mutating func clearTorrent() {_uniqueStorage()._torrent = nil}

  public var playbackDevices: Stremio_Core_Models_LoadablePlaybackDevices {
    get {return _storage._playbackDevices ?? Stremio_Core_Models_LoadablePlaybackDevices()}
    set {_uniqueStorage()._playbackDevices = newValue}
  }
  /// Returns true if `playbackDevices` has been explicitly set.
  public var hasPlaybackDevices: Bool {return _storage._playbackDevices != nil}
  /// Clears the value of `playbackDevices`. Subsequent reads from it will return its default value.
  public mutating func clearPlaybackDevices() {_uniqueStorage()._playbackDevices = nil}

  public var statistics: Stremio_Core_Models_LoadableStatistics {
    get {return _storage._statistics ?? Stremio_Core_Models_LoadableStatistics()}
    set {_uniqueStorage()._statistics = newValue}
  }
  /// Returns true if `statistics` has been explicitly set.
  public var hasStatistics: Bool {return _storage._statistics != nil}
  /// Clears the value of `statistics`. Subsequent reads from it will return its default value.
  public mutating func clearStatistics() {_uniqueStorage()._statistics = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Selected {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var transportURL: String {
      get {return _transportURL ?? String()}
      set {_transportURL = newValue}
    }
    /// Returns true if `transportURL` has been explicitly set.
    public var hasTransportURL: Bool {return self._transportURL != nil}
    /// Clears the value of `transportURL`. Subsequent reads from it will return its default value.
    public mutating func clearTransportURL() {self._transportURL = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _transportURL: String? = nil
  }

  public struct StatisticsRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var infoHash: String {
      get {return _infoHash ?? String()}
      set {_infoHash = newValue}
    }
    /// Returns true if `infoHash` has been explicitly set.
    public var hasInfoHash: Bool {return self._infoHash != nil}
    /// Clears the value of `infoHash`. Subsequent reads from it will return its default value.
    public mutating func clearInfoHash() {self._infoHash = nil}

    public var fileIndex: Int32 {
      get {return _fileIndex ?? 0}
      set {_fileIndex = newValue}
    }
    /// Returns true if `fileIndex` has been explicitly set.
    public var hasFileIndex: Bool {return self._fileIndex != nil}
    /// Clears the value of `fileIndex`. Subsequent reads from it will return its default value.
    public mutating func clearFileIndex() {self._fileIndex = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _infoHash: String? = nil
    fileprivate var _fileIndex: Int32? = nil
  }

  public struct Settings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var appPath: String {
      get {return _appPath ?? String()}
      set {_appPath = newValue}
    }
    /// Returns true if `appPath` has been explicitly set.
    public var hasAppPath: Bool {return self._appPath != nil}
    /// Clears the value of `appPath`. Subsequent reads from it will return its default value.
    public mutating func clearAppPath() {self._appPath = nil}

    public var cacheRoot: String {
      get {return _cacheRoot ?? String()}
      set {_cacheRoot = newValue}
    }
    /// Returns true if `cacheRoot` has been explicitly set.
    public var hasCacheRoot: Bool {return self._cacheRoot != nil}
    /// Clears the value of `cacheRoot`. Subsequent reads from it will return its default value.
    public mutating func clearCacheRoot() {self._cacheRoot = nil}

    public var serverVersion: String {
      get {return _serverVersion ?? String()}
      set {_serverVersion = newValue}
    }
    /// Returns true if `serverVersion` has been explicitly set.
    public var hasServerVersion: Bool {return self._serverVersion != nil}
    /// Clears the value of `serverVersion`. Subsequent reads from it will return its default value.
    public mutating func clearServerVersion() {self._serverVersion = nil}

    public var remoteHTTPS: String {
      get {return _remoteHTTPS ?? String()}
      set {_remoteHTTPS = newValue}
    }
    /// Returns true if `remoteHTTPS` has been explicitly set.
    public var hasRemoteHTTPS: Bool {return self._remoteHTTPS != nil}
    /// Clears the value of `remoteHTTPS`. Subsequent reads from it will return its default value.
    public mutating func clearRemoteHTTPS() {self._remoteHTTPS = nil}

    public var transcodeProfile: String {
      get {return _transcodeProfile ?? String()}
      set {_transcodeProfile = newValue}
    }
    /// Returns true if `transcodeProfile` has been explicitly set.
    public var hasTranscodeProfile: Bool {return self._transcodeProfile != nil}
    /// Clears the value of `transcodeProfile`. Subsequent reads from it will return its default value.
    public mutating func clearTranscodeProfile() {self._transcodeProfile = nil}

    public var cacheSize: Double {
      get {return _cacheSize ?? 0}
      set {_cacheSize = newValue}
    }
    /// Returns true if `cacheSize` has been explicitly set.
    public var hasCacheSize: Bool {return self._cacheSize != nil}
    /// Clears the value of `cacheSize`. Subsequent reads from it will return its default value.
    public mutating func clearCacheSize() {self._cacheSize = nil}

    public var btMaxConnections: UInt64 {
      get {return _btMaxConnections ?? 0}
      set {_btMaxConnections = newValue}
    }
    /// Returns true if `btMaxConnections` has been explicitly set.
    public var hasBtMaxConnections: Bool {return self._btMaxConnections != nil}
    /// Clears the value of `btMaxConnections`. Subsequent reads from it will return its default value.
    public mutating func clearBtMaxConnections() {self._btMaxConnections = nil}

    public var btHandshakeTimeout: UInt64 {
      get {return _btHandshakeTimeout ?? 0}
      set {_btHandshakeTimeout = newValue}
    }
    /// Returns true if `btHandshakeTimeout` has been explicitly set.
    public var hasBtHandshakeTimeout: Bool {return self._btHandshakeTimeout != nil}
    /// Clears the value of `btHandshakeTimeout`. Subsequent reads from it will return its default value.
    public mutating func clearBtHandshakeTimeout() {self._btHandshakeTimeout = nil}

    public var btRequestTimeout: UInt64 {
      get {return _btRequestTimeout ?? 0}
      set {_btRequestTimeout = newValue}
    }
    /// Returns true if `btRequestTimeout` has been explicitly set.
    public var hasBtRequestTimeout: Bool {return self._btRequestTimeout != nil}
    /// Clears the value of `btRequestTimeout`. Subsequent reads from it will return its default value.
    public mutating func clearBtRequestTimeout() {self._btRequestTimeout = nil}

    public var btDownloadSpeedSoftLimit: Double {
      get {return _btDownloadSpeedSoftLimit ?? 0}
      set {_btDownloadSpeedSoftLimit = newValue}
    }
    /// Returns true if `btDownloadSpeedSoftLimit` has been explicitly set.
    public var hasBtDownloadSpeedSoftLimit: Bool {return self._btDownloadSpeedSoftLimit != nil}
    /// Clears the value of `btDownloadSpeedSoftLimit`. Subsequent reads from it will return its default value.
    public mutating func clearBtDownloadSpeedSoftLimit() {self._btDownloadSpeedSoftLimit = nil}

    public var btDownloadSpeedHardLimit: Double {
      get {return _btDownloadSpeedHardLimit ?? 0}
      set {_btDownloadSpeedHardLimit = newValue}
    }
    /// Returns true if `btDownloadSpeedHardLimit` has been explicitly set.
    public var hasBtDownloadSpeedHardLimit: Bool {return self._btDownloadSpeedHardLimit != nil}
    /// Clears the value of `btDownloadSpeedHardLimit`. Subsequent reads from it will return its default value.
    public mutating func clearBtDownloadSpeedHardLimit() {self._btDownloadSpeedHardLimit = nil}

    public var btMinPeersForStable: UInt64 {
      get {return _btMinPeersForStable ?? 0}
      set {_btMinPeersForStable = newValue}
    }
    /// Returns true if `btMinPeersForStable` has been explicitly set.
    public var hasBtMinPeersForStable: Bool {return self._btMinPeersForStable != nil}
    /// Clears the value of `btMinPeersForStable`. Subsequent reads from it will return its default value.
    public mutating func clearBtMinPeersForStable() {self._btMinPeersForStable = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _appPath: String? = nil
    fileprivate var _cacheRoot: String? = nil
    fileprivate var _serverVersion: String? = nil
    fileprivate var _remoteHTTPS: String? = nil
    fileprivate var _transcodeProfile: String? = nil
    fileprivate var _cacheSize: Double? = nil
    fileprivate var _btMaxConnections: UInt64? = nil
    fileprivate var _btHandshakeTimeout: UInt64? = nil
    fileprivate var _btRequestTimeout: UInt64? = nil
    fileprivate var _btDownloadSpeedSoftLimit: Double? = nil
    fileprivate var _btDownloadSpeedHardLimit: Double? = nil
    fileprivate var _btMinPeersForStable: UInt64? = nil
  }

  public struct Statistics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var name: String {
      get {return _storage._name ?? String()}
      set {_uniqueStorage()._name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    public var hasName: Bool {return _storage._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    public mutating func clearName() {_uniqueStorage()._name = nil}

    public var infoHash: String {
      get {return _storage._infoHash ?? String()}
      set {_uniqueStorage()._infoHash = newValue}
    }
    /// Returns true if `infoHash` has been explicitly set.
    public var hasInfoHash: Bool {return _storage._infoHash != nil}
    /// Clears the value of `infoHash`. Subsequent reads from it will return its default value.
    public mutating func clearInfoHash() {_uniqueStorage()._infoHash = nil}

    public var downloadSpeed: Double {
      get {return _storage._downloadSpeed ?? 0}
      set {_uniqueStorage()._downloadSpeed = newValue}
    }
    /// Returns true if `downloadSpeed` has been explicitly set.
    public var hasDownloadSpeed: Bool {return _storage._downloadSpeed != nil}
    /// Clears the value of `downloadSpeed`. Subsequent reads from it will return its default value.
    public mutating func clearDownloadSpeed() {_uniqueStorage()._downloadSpeed = nil}

    public var uploadSpeed: Double {
      get {return _storage._uploadSpeed ?? 0}
      set {_uniqueStorage()._uploadSpeed = newValue}
    }
    /// Returns true if `uploadSpeed` has been explicitly set.
    public var hasUploadSpeed: Bool {return _storage._uploadSpeed != nil}
    /// Clears the value of `uploadSpeed`. Subsequent reads from it will return its default value.
    public mutating func clearUploadSpeed() {_uniqueStorage()._uploadSpeed = nil}

    public var downloaded: Int64 {
      get {return _storage._downloaded ?? 0}
      set {_uniqueStorage()._downloaded = newValue}
    }
    /// Returns true if `downloaded` has been explicitly set.
    public var hasDownloaded: Bool {return _storage._downloaded != nil}
    /// Clears the value of `downloaded`. Subsequent reads from it will return its default value.
    public mutating func clearDownloaded() {_uniqueStorage()._downloaded = nil}

    public var uploaded: Int64 {
      get {return _storage._uploaded ?? 0}
      set {_uniqueStorage()._uploaded = newValue}
    }
    /// Returns true if `uploaded` has been explicitly set.
    public var hasUploaded: Bool {return _storage._uploaded != nil}
    /// Clears the value of `uploaded`. Subsequent reads from it will return its default value.
    public mutating func clearUploaded() {_uniqueStorage()._uploaded = nil}

    public var unchoked: Int64 {
      get {return _storage._unchoked ?? 0}
      set {_uniqueStorage()._unchoked = newValue}
    }
    /// Returns true if `unchoked` has been explicitly set.
    public var hasUnchoked: Bool {return _storage._unchoked != nil}
    /// Clears the value of `unchoked`. Subsequent reads from it will return its default value.
    public mutating func clearUnchoked() {_uniqueStorage()._unchoked = nil}

    public var peers: Int64 {
      get {return _storage._peers ?? 0}
      set {_uniqueStorage()._peers = newValue}
    }
    /// Returns true if `peers` has been explicitly set.
    public var hasPeers: Bool {return _storage._peers != nil}
    /// Clears the value of `peers`. Subsequent reads from it will return its default value.
    public mutating func clearPeers() {_uniqueStorage()._peers = nil}

    public var queued: Int64 {
      get {return _storage._queued ?? 0}
      set {_uniqueStorage()._queued = newValue}
    }
    /// Returns true if `queued` has been explicitly set.
    public var hasQueued: Bool {return _storage._queued != nil}
    /// Clears the value of `queued`. Subsequent reads from it will return its default value.
    public mutating func clearQueued() {_uniqueStorage()._queued = nil}

    public var unique: Int64 {
      get {return _storage._unique ?? 0}
      set {_uniqueStorage()._unique = newValue}
    }
    /// Returns true if `unique` has been explicitly set.
    public var hasUnique: Bool {return _storage._unique != nil}
    /// Clears the value of `unique`. Subsequent reads from it will return its default value.
    public mutating func clearUnique() {_uniqueStorage()._unique = nil}

    public var connectionTries: Int64 {
      get {return _storage._connectionTries ?? 0}
      set {_uniqueStorage()._connectionTries = newValue}
    }
    /// Returns true if `connectionTries` has been explicitly set.
    public var hasConnectionTries: Bool {return _storage._connectionTries != nil}
    /// Clears the value of `connectionTries`. Subsequent reads from it will return its default value.
    public mutating func clearConnectionTries() {_uniqueStorage()._connectionTries = nil}

    public var peerSearchRunning: Bool {
      get {return _storage._peerSearchRunning ?? false}
      set {_uniqueStorage()._peerSearchRunning = newValue}
    }
    /// Returns true if `peerSearchRunning` has been explicitly set.
    public var hasPeerSearchRunning: Bool {return _storage._peerSearchRunning != nil}
    /// Clears the value of `peerSearchRunning`. Subsequent reads from it will return its default value.
    public mutating func clearPeerSearchRunning() {_uniqueStorage()._peerSearchRunning = nil}

    public var streamLen: Int64 {
      get {return _storage._streamLen ?? 0}
      set {_uniqueStorage()._streamLen = newValue}
    }
    /// Returns true if `streamLen` has been explicitly set.
    public var hasStreamLen: Bool {return _storage._streamLen != nil}
    /// Clears the value of `streamLen`. Subsequent reads from it will return its default value.
    public mutating func clearStreamLen() {_uniqueStorage()._streamLen = nil}

    public var streamName: String {
      get {return _storage._streamName ?? String()}
      set {_uniqueStorage()._streamName = newValue}
    }
    /// Returns true if `streamName` has been explicitly set.
    public var hasStreamName: Bool {return _storage._streamName != nil}
    /// Clears the value of `streamName`. Subsequent reads from it will return its default value.
    public mutating func clearStreamName() {_uniqueStorage()._streamName = nil}

    public var streamProgress: Double {
      get {return _storage._streamProgress ?? 0}
      set {_uniqueStorage()._streamProgress = newValue}
    }
    /// Returns true if `streamProgress` has been explicitly set.
    public var hasStreamProgress: Bool {return _storage._streamProgress != nil}
    /// Clears the value of `streamProgress`. Subsequent reads from it will return its default value.
    public mutating func clearStreamProgress() {_uniqueStorage()._streamProgress = nil}

    public var swarmConnections: Int64 {
      get {return _storage._swarmConnections ?? 0}
      set {_uniqueStorage()._swarmConnections = newValue}
    }
    /// Returns true if `swarmConnections` has been explicitly set.
    public var hasSwarmConnections: Bool {return _storage._swarmConnections != nil}
    /// Clears the value of `swarmConnections`. Subsequent reads from it will return its default value.
    public mutating func clearSwarmConnections() {_uniqueStorage()._swarmConnections = nil}

    public var swarmPaused: Bool {
      get {return _storage._swarmPaused ?? false}
      set {_uniqueStorage()._swarmPaused = newValue}
    }
    /// Returns true if `swarmPaused` has been explicitly set.
    public var hasSwarmPaused: Bool {return _storage._swarmPaused != nil}
    /// Clears the value of `swarmPaused`. Subsequent reads from it will return its default value.
    public mutating func clearSwarmPaused() {_uniqueStorage()._swarmPaused = nil}

    public var swarmSize: Int64 {
      get {return _storage._swarmSize ?? 0}
      set {_uniqueStorage()._swarmSize = newValue}
    }
    /// Returns true if `swarmSize` has been explicitly set.
    public var hasSwarmSize: Bool {return _storage._swarmSize != nil}
    /// Clears the value of `swarmSize`. Subsequent reads from it will return its default value.
    public mutating func clearSwarmSize() {_uniqueStorage()._swarmSize = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct PlaybackDevice {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    public var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    public mutating func clearID() {self._id = nil}

    public var name: String {
      get {return _name ?? String()}
      set {_name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    public var hasName: Bool {return self._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    public mutating func clearName() {self._name = nil}

    public var type: String {
      get {return _type ?? String()}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    public mutating func clearType() {self._type = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _id: String? = nil
    fileprivate var _name: String? = nil
    fileprivate var _type: String? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Stremio_Core_Models_LoadableSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: Stremio_Core_Models_LoadableSettings.OneOf_Content? = nil

  public var loading: Stremio_Core_Models_Loading {
    get {
      if case .loading(let v)? = content {return v}
      return Stremio_Core_Models_Loading()
    }
    set {content = .loading(newValue)}
  }

  public var error: Stremio_Core_Models_Error {
    get {
      if case .error(let v)? = content {return v}
      return Stremio_Core_Models_Error()
    }
    set {content = .error(newValue)}
  }

  public var ready: Stremio_Core_Models_StreamingServer.Settings {
    get {
      if case .ready(let v)? = content {return v}
      return Stremio_Core_Models_StreamingServer.Settings()
    }
    set {content = .ready(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Content: Equatable {
    case loading(Stremio_Core_Models_Loading)
    case error(Stremio_Core_Models_Error)
    case ready(Stremio_Core_Models_StreamingServer.Settings)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .error: return {
        guard case .error(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .ready: return {
        guard case .ready(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      default: return true
      }
    }

  #if !swift(>=4.1)
    public static func ==(lhs: Stremio_Core_Models_LoadableSettings.OneOf_Content, rhs: Stremio_Core_Models_LoadableSettings.OneOf_Content) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.loading, .loading): return {
        guard case .loading(let l) = lhs, case .loading(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ready, .ready): return {
        guard case .ready(let l) = lhs, case .ready(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Stremio_Core_Models_LoadableBaseUrl {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: Stremio_Core_Models_LoadableBaseUrl.OneOf_Content? = nil

  public var loading: Stremio_Core_Models_Loading {
    get {
      if case .loading(let v)? = content {return v}
      return Stremio_Core_Models_Loading()
    }
    set {content = .loading(newValue)}
  }

  public var error: Stremio_Core_Models_Error {
    get {
      if case .error(let v)? = content {return v}
      return Stremio_Core_Models_Error()
    }
    set {content = .error(newValue)}
  }

  public var ready: String {
    get {
      if case .ready(let v)? = content {return v}
      return String()
    }
    set {content = .ready(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Content: Equatable {
    case loading(Stremio_Core_Models_Loading)
    case error(Stremio_Core_Models_Error)
    case ready(String)

    fileprivate var isInitialized: Bool {
      guard case .error(let v) = self else {return true}
      return v.isInitialized
    }

  #if !swift(>=4.1)
    public static func ==(lhs: Stremio_Core_Models_LoadableBaseUrl.OneOf_Content, rhs: Stremio_Core_Models_LoadableBaseUrl.OneOf_Content) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.loading, .loading): return {
        guard case .loading(let l) = lhs, case .loading(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ready, .ready): return {
        guard case .ready(let l) = lhs, case .ready(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Stremio_Core_Models_LoadableTorrent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var deeplinks: Stremio_Core_Models_LoadableTorrent.OneOf_Deeplinks? = nil

  public var loading: Stremio_Core_Models_Loading {
    get {
      if case .loading(let v)? = deeplinks {return v}
      return Stremio_Core_Models_Loading()
    }
    set {deeplinks = .loading(newValue)}
  }

  public var error: Stremio_Core_Models_Error {
    get {
      if case .error(let v)? = deeplinks {return v}
      return Stremio_Core_Models_Error()
    }
    set {deeplinks = .error(newValue)}
  }

  public var ready: Stremio_Core_Types_MetaItemDeepLinks {
    get {
      if case .ready(let v)? = deeplinks {return v}
      return Stremio_Core_Types_MetaItemDeepLinks()
    }
    set {deeplinks = .ready(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Deeplinks: Equatable {
    case loading(Stremio_Core_Models_Loading)
    case error(Stremio_Core_Models_Error)
    case ready(Stremio_Core_Types_MetaItemDeepLinks)

    fileprivate var isInitialized: Bool {
      guard case .error(let v) = self else {return true}
      return v.isInitialized
    }

  #if !swift(>=4.1)
    public static func ==(lhs: Stremio_Core_Models_LoadableTorrent.OneOf_Deeplinks, rhs: Stremio_Core_Models_LoadableTorrent.OneOf_Deeplinks) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.loading, .loading): return {
        guard case .loading(let l) = lhs, case .loading(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ready, .ready): return {
        guard case .ready(let l) = lhs, case .ready(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Stremio_Core_Models_LoadablePlaybackDevices {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: Stremio_Core_Models_LoadablePlaybackDevices.OneOf_Content? = nil

  public var loading: Stremio_Core_Models_Loading {
    get {
      if case .loading(let v)? = content {return v}
      return Stremio_Core_Models_Loading()
    }
    set {content = .loading(newValue)}
  }

  public var error: Stremio_Core_Models_Error {
    get {
      if case .error(let v)? = content {return v}
      return Stremio_Core_Models_Error()
    }
    set {content = .error(newValue)}
  }

  public var ready: Stremio_Core_Models_PlaybackDevices {
    get {
      if case .ready(let v)? = content {return v}
      return Stremio_Core_Models_PlaybackDevices()
    }
    set {content = .ready(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Content: Equatable {
    case loading(Stremio_Core_Models_Loading)
    case error(Stremio_Core_Models_Error)
    case ready(Stremio_Core_Models_PlaybackDevices)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .error: return {
        guard case .error(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .ready: return {
        guard case .ready(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      default: return true
      }
    }

  #if !swift(>=4.1)
    public static func ==(lhs: Stremio_Core_Models_LoadablePlaybackDevices.OneOf_Content, rhs: Stremio_Core_Models_LoadablePlaybackDevices.OneOf_Content) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.loading, .loading): return {
        guard case .loading(let l) = lhs, case .loading(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ready, .ready): return {
        guard case .ready(let l) = lhs, case .ready(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Stremio_Core_Models_LoadableStatistics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: Stremio_Core_Models_LoadableStatistics.OneOf_Content? = nil

  public var loading: Stremio_Core_Models_Loading {
    get {
      if case .loading(let v)? = content {return v}
      return Stremio_Core_Models_Loading()
    }
    set {content = .loading(newValue)}
  }

  public var error: Stremio_Core_Models_Error {
    get {
      if case .error(let v)? = content {return v}
      return Stremio_Core_Models_Error()
    }
    set {content = .error(newValue)}
  }

  public var ready: Stremio_Core_Models_StreamingServer.Statistics {
    get {
      if case .ready(let v)? = content {return v}
      return Stremio_Core_Models_StreamingServer.Statistics()
    }
    set {content = .ready(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Content: Equatable {
    case loading(Stremio_Core_Models_Loading)
    case error(Stremio_Core_Models_Error)
    case ready(Stremio_Core_Models_StreamingServer.Statistics)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .error: return {
        guard case .error(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .ready: return {
        guard case .ready(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      default: return true
      }
    }

  #if !swift(>=4.1)
    public static func ==(lhs: Stremio_Core_Models_LoadableStatistics.OneOf_Content, rhs: Stremio_Core_Models_LoadableStatistics.OneOf_Content) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.loading, .loading): return {
        guard case .loading(let l) = lhs, case .loading(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ready, .ready): return {
        guard case .ready(let l) = lhs, case .ready(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Stremio_Core_Models_PlaybackDevices {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var devices: [Stremio_Core_Models_StreamingServer.PlaybackDevice] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stremio_Core_Models_StreamingServer: @unchecked Sendable {}
extension Stremio_Core_Models_StreamingServer.Selected: @unchecked Sendable {}
extension Stremio_Core_Models_StreamingServer.StatisticsRequest: @unchecked Sendable {}
extension Stremio_Core_Models_StreamingServer.Settings: @unchecked Sendable {}
extension Stremio_Core_Models_StreamingServer.Statistics: @unchecked Sendable {}
extension Stremio_Core_Models_StreamingServer.PlaybackDevice: @unchecked Sendable {}
extension Stremio_Core_Models_LoadableSettings: @unchecked Sendable {}
extension Stremio_Core_Models_LoadableSettings.OneOf_Content: @unchecked Sendable {}
extension Stremio_Core_Models_LoadableBaseUrl: @unchecked Sendable {}
extension Stremio_Core_Models_LoadableBaseUrl.OneOf_Content: @unchecked Sendable {}
extension Stremio_Core_Models_LoadableTorrent: @unchecked Sendable {}
extension Stremio_Core_Models_LoadableTorrent.OneOf_Deeplinks: @unchecked Sendable {}
extension Stremio_Core_Models_LoadablePlaybackDevices: @unchecked Sendable {}
extension Stremio_Core_Models_LoadablePlaybackDevices.OneOf_Content: @unchecked Sendable {}
extension Stremio_Core_Models_LoadableStatistics: @unchecked Sendable {}
extension Stremio_Core_Models_LoadableStatistics.OneOf_Content: @unchecked Sendable {}
extension Stremio_Core_Models_PlaybackDevices: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stremio.core.models"

extension Stremio_Core_Models_StreamingServer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingServer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "selected"),
    2: .standard(proto: "base_url"),
    3: .standard(proto: "remote_url"),
    4: .same(proto: "settings"),
    5: .same(proto: "torrent"),
    6: .standard(proto: "playback_devices"),
    7: .same(proto: "statistics"),
  ]

  fileprivate class _StorageClass {
    var _selected: Stremio_Core_Models_StreamingServer.Selected? = nil
    var _baseURL: String? = nil
    var _remoteURL: String? = nil
    var _settings: Stremio_Core_Models_LoadableSettings? = nil
    var _torrent: Stremio_Core_Models_LoadableTorrent? = nil
    var _playbackDevices: Stremio_Core_Models_LoadablePlaybackDevices? = nil
    var _statistics: Stremio_Core_Models_LoadableStatistics? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _selected = source._selected
      _baseURL = source._baseURL
      _remoteURL = source._remoteURL
      _settings = source._settings
      _torrent = source._torrent
      _playbackDevices = source._playbackDevices
      _statistics = source._statistics
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._selected == nil {return false}
      if _storage._settings == nil {return false}
      if _storage._playbackDevices == nil {return false}
      if let v = _storage._selected, !v.isInitialized {return false}
      if let v = _storage._settings, !v.isInitialized {return false}
      if let v = _storage._torrent, !v.isInitialized {return false}
      if let v = _storage._playbackDevices, !v.isInitialized {return false}
      if let v = _storage._statistics, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._selected) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._baseURL) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._remoteURL) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._settings) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._torrent) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._playbackDevices) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._statistics) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._selected {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._baseURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._remoteURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._torrent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._playbackDevices {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._statistics {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_StreamingServer, rhs: Stremio_Core_Models_StreamingServer) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._selected != rhs_storage._selected {return false}
        if _storage._baseURL != rhs_storage._baseURL {return false}
        if _storage._remoteURL != rhs_storage._remoteURL {return false}
        if _storage._settings != rhs_storage._settings {return false}
        if _storage._torrent != rhs_storage._torrent {return false}
        if _storage._playbackDevices != rhs_storage._playbackDevices {return false}
        if _storage._statistics != rhs_storage._statistics {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_StreamingServer.Selected: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_StreamingServer.protoMessageName + ".Selected"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transport_url"),
  ]

  public var isInitialized: Bool {
    if self._transportURL == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._transportURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._transportURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_StreamingServer.Selected, rhs: Stremio_Core_Models_StreamingServer.Selected) -> Bool {
    if lhs._transportURL != rhs._transportURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_StreamingServer.StatisticsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_StreamingServer.protoMessageName + ".StatisticsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "info_hash"),
    2: .standard(proto: "file_index"),
  ]

  public var isInitialized: Bool {
    if self._infoHash == nil {return false}
    if self._fileIndex == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._infoHash) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._fileIndex) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._infoHash {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fileIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_StreamingServer.StatisticsRequest, rhs: Stremio_Core_Models_StreamingServer.StatisticsRequest) -> Bool {
    if lhs._infoHash != rhs._infoHash {return false}
    if lhs._fileIndex != rhs._fileIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_StreamingServer.Settings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_StreamingServer.protoMessageName + ".Settings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_path"),
    2: .standard(proto: "cache_root"),
    3: .standard(proto: "server_version"),
    4: .standard(proto: "remote_https"),
    5: .standard(proto: "transcode_profile"),
    6: .standard(proto: "cache_size"),
    7: .standard(proto: "bt_max_connections"),
    8: .standard(proto: "bt_handshake_timeout"),
    9: .standard(proto: "bt_request_timeout"),
    10: .standard(proto: "bt_download_speed_soft_limit"),
    11: .standard(proto: "bt_download_speed_hard_limit"),
    12: .standard(proto: "bt_min_peers_for_stable"),
  ]

  public var isInitialized: Bool {
    if self._appPath == nil {return false}
    if self._cacheRoot == nil {return false}
    if self._serverVersion == nil {return false}
    if self._btMaxConnections == nil {return false}
    if self._btHandshakeTimeout == nil {return false}
    if self._btRequestTimeout == nil {return false}
    if self._btDownloadSpeedSoftLimit == nil {return false}
    if self._btDownloadSpeedHardLimit == nil {return false}
    if self._btMinPeersForStable == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._appPath) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._cacheRoot) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._serverVersion) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._remoteHTTPS) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._transcodeProfile) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._cacheSize) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self._btMaxConnections) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self._btHandshakeTimeout) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self._btRequestTimeout) }()
      case 10: try { try decoder.decodeSingularDoubleField(value: &self._btDownloadSpeedSoftLimit) }()
      case 11: try { try decoder.decodeSingularDoubleField(value: &self._btDownloadSpeedHardLimit) }()
      case 12: try { try decoder.decodeSingularUInt64Field(value: &self._btMinPeersForStable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._appPath {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._cacheRoot {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._serverVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._remoteHTTPS {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._transcodeProfile {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._cacheSize {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._btMaxConnections {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._btHandshakeTimeout {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._btRequestTimeout {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._btDownloadSpeedSoftLimit {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._btDownloadSpeedHardLimit {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._btMinPeersForStable {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_StreamingServer.Settings, rhs: Stremio_Core_Models_StreamingServer.Settings) -> Bool {
    if lhs._appPath != rhs._appPath {return false}
    if lhs._cacheRoot != rhs._cacheRoot {return false}
    if lhs._serverVersion != rhs._serverVersion {return false}
    if lhs._remoteHTTPS != rhs._remoteHTTPS {return false}
    if lhs._transcodeProfile != rhs._transcodeProfile {return false}
    if lhs._cacheSize != rhs._cacheSize {return false}
    if lhs._btMaxConnections != rhs._btMaxConnections {return false}
    if lhs._btHandshakeTimeout != rhs._btHandshakeTimeout {return false}
    if lhs._btRequestTimeout != rhs._btRequestTimeout {return false}
    if lhs._btDownloadSpeedSoftLimit != rhs._btDownloadSpeedSoftLimit {return false}
    if lhs._btDownloadSpeedHardLimit != rhs._btDownloadSpeedHardLimit {return false}
    if lhs._btMinPeersForStable != rhs._btMinPeersForStable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_StreamingServer.Statistics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_StreamingServer.protoMessageName + ".Statistics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "info_hash"),
    6: .standard(proto: "download_speed"),
    7: .standard(proto: "upload_speed"),
    8: .same(proto: "downloaded"),
    9: .same(proto: "uploaded"),
    10: .same(proto: "unchoked"),
    11: .same(proto: "peers"),
    12: .same(proto: "queued"),
    13: .same(proto: "unique"),
    14: .standard(proto: "connection_tries"),
    15: .standard(proto: "peer_search_running"),
    16: .standard(proto: "stream_len"),
    17: .standard(proto: "stream_name"),
    18: .standard(proto: "stream_progress"),
    19: .standard(proto: "swarm_connections"),
    20: .standard(proto: "swarm_paused"),
    21: .standard(proto: "swarm_size"),
  ]

  fileprivate class _StorageClass {
    var _name: String? = nil
    var _infoHash: String? = nil
    var _downloadSpeed: Double? = nil
    var _uploadSpeed: Double? = nil
    var _downloaded: Int64? = nil
    var _uploaded: Int64? = nil
    var _unchoked: Int64? = nil
    var _peers: Int64? = nil
    var _queued: Int64? = nil
    var _unique: Int64? = nil
    var _connectionTries: Int64? = nil
    var _peerSearchRunning: Bool? = nil
    var _streamLen: Int64? = nil
    var _streamName: String? = nil
    var _streamProgress: Double? = nil
    var _swarmConnections: Int64? = nil
    var _swarmPaused: Bool? = nil
    var _swarmSize: Int64? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _infoHash = source._infoHash
      _downloadSpeed = source._downloadSpeed
      _uploadSpeed = source._uploadSpeed
      _downloaded = source._downloaded
      _uploaded = source._uploaded
      _unchoked = source._unchoked
      _peers = source._peers
      _queued = source._queued
      _unique = source._unique
      _connectionTries = source._connectionTries
      _peerSearchRunning = source._peerSearchRunning
      _streamLen = source._streamLen
      _streamName = source._streamName
      _streamProgress = source._streamProgress
      _swarmConnections = source._swarmConnections
      _swarmPaused = source._swarmPaused
      _swarmSize = source._swarmSize
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._name == nil {return false}
      if _storage._infoHash == nil {return false}
      if _storage._downloadSpeed == nil {return false}
      if _storage._uploadSpeed == nil {return false}
      if _storage._downloaded == nil {return false}
      if _storage._uploaded == nil {return false}
      if _storage._unchoked == nil {return false}
      if _storage._peers == nil {return false}
      if _storage._queued == nil {return false}
      if _storage._unique == nil {return false}
      if _storage._connectionTries == nil {return false}
      if _storage._peerSearchRunning == nil {return false}
      if _storage._streamLen == nil {return false}
      if _storage._streamName == nil {return false}
      if _storage._streamProgress == nil {return false}
      if _storage._swarmConnections == nil {return false}
      if _storage._swarmPaused == nil {return false}
      if _storage._swarmSize == nil {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._infoHash) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._downloadSpeed) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._uploadSpeed) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._downloaded) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._uploaded) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._unchoked) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._peers) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._queued) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._unique) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._connectionTries) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._peerSearchRunning) }()
        case 16: try { try decoder.decodeSingularInt64Field(value: &_storage._streamLen) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._streamName) }()
        case 18: try { try decoder.decodeSingularDoubleField(value: &_storage._streamProgress) }()
        case 19: try { try decoder.decodeSingularInt64Field(value: &_storage._swarmConnections) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._swarmPaused) }()
        case 21: try { try decoder.decodeSingularInt64Field(value: &_storage._swarmSize) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._infoHash {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._downloadSpeed {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._uploadSpeed {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._downloaded {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._uploaded {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._unchoked {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._peers {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._queued {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._unique {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._connectionTries {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._peerSearchRunning {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._streamLen {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._streamName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._streamProgress {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._swarmConnections {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._swarmPaused {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._swarmSize {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 21)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_StreamingServer.Statistics, rhs: Stremio_Core_Models_StreamingServer.Statistics) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._infoHash != rhs_storage._infoHash {return false}
        if _storage._downloadSpeed != rhs_storage._downloadSpeed {return false}
        if _storage._uploadSpeed != rhs_storage._uploadSpeed {return false}
        if _storage._downloaded != rhs_storage._downloaded {return false}
        if _storage._uploaded != rhs_storage._uploaded {return false}
        if _storage._unchoked != rhs_storage._unchoked {return false}
        if _storage._peers != rhs_storage._peers {return false}
        if _storage._queued != rhs_storage._queued {return false}
        if _storage._unique != rhs_storage._unique {return false}
        if _storage._connectionTries != rhs_storage._connectionTries {return false}
        if _storage._peerSearchRunning != rhs_storage._peerSearchRunning {return false}
        if _storage._streamLen != rhs_storage._streamLen {return false}
        if _storage._streamName != rhs_storage._streamName {return false}
        if _storage._streamProgress != rhs_storage._streamProgress {return false}
        if _storage._swarmConnections != rhs_storage._swarmConnections {return false}
        if _storage._swarmPaused != rhs_storage._swarmPaused {return false}
        if _storage._swarmSize != rhs_storage._swarmSize {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_StreamingServer.PlaybackDevice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_StreamingServer.protoMessageName + ".PlaybackDevice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "type"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._name == nil {return false}
    if self._type == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_StreamingServer.PlaybackDevice, rhs: Stremio_Core_Models_StreamingServer.PlaybackDevice) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LoadableSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadableSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "loading"),
    2: .same(proto: "error"),
    3: .same(proto: "ready"),
  ]

  public var isInitialized: Bool {
    if let v = self.content, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Stremio_Core_Models_Loading?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .loading(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .loading(v)
        }
      }()
      case 2: try {
        var v: Stremio_Core_Models_Error?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .error(v)
        }
      }()
      case 3: try {
        var v: Stremio_Core_Models_StreamingServer.Settings?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .ready(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .ready(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.content {
    case .loading?: try {
      guard case .loading(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .ready?: try {
      guard case .ready(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LoadableSettings, rhs: Stremio_Core_Models_LoadableSettings) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LoadableBaseUrl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadableBaseUrl"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "loading"),
    2: .same(proto: "error"),
    3: .same(proto: "ready"),
  ]

  public var isInitialized: Bool {
    if let v = self.content, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Stremio_Core_Models_Loading?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .loading(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .loading(v)
        }
      }()
      case 2: try {
        var v: Stremio_Core_Models_Error?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .error(v)
        }
      }()
      case 3: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.content != nil {try decoder.handleConflictingOneOf()}
          self.content = .ready(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.content {
    case .loading?: try {
      guard case .loading(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .ready?: try {
      guard case .ready(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LoadableBaseUrl, rhs: Stremio_Core_Models_LoadableBaseUrl) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LoadableTorrent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadableTorrent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "loading"),
    2: .same(proto: "error"),
    3: .same(proto: "ready"),
  ]

  public var isInitialized: Bool {
    if let v = self.deeplinks, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Stremio_Core_Models_Loading?
        var hadOneofValue = false
        if let current = self.deeplinks {
          hadOneofValue = true
          if case .loading(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.deeplinks = .loading(v)
        }
      }()
      case 2: try {
        var v: Stremio_Core_Models_Error?
        var hadOneofValue = false
        if let current = self.deeplinks {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.deeplinks = .error(v)
        }
      }()
      case 3: try {
        var v: Stremio_Core_Types_MetaItemDeepLinks?
        var hadOneofValue = false
        if let current = self.deeplinks {
          hadOneofValue = true
          if case .ready(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.deeplinks = .ready(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.deeplinks {
    case .loading?: try {
      guard case .loading(let v)? = self.deeplinks else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.deeplinks else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .ready?: try {
      guard case .ready(let v)? = self.deeplinks else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LoadableTorrent, rhs: Stremio_Core_Models_LoadableTorrent) -> Bool {
    if lhs.deeplinks != rhs.deeplinks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LoadablePlaybackDevices: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadablePlaybackDevices"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "loading"),
    2: .same(proto: "error"),
    3: .same(proto: "ready"),
  ]

  public var isInitialized: Bool {
    if let v = self.content, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Stremio_Core_Models_Loading?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .loading(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .loading(v)
        }
      }()
      case 2: try {
        var v: Stremio_Core_Models_Error?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .error(v)
        }
      }()
      case 3: try {
        var v: Stremio_Core_Models_PlaybackDevices?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .ready(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .ready(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.content {
    case .loading?: try {
      guard case .loading(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .ready?: try {
      guard case .ready(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LoadablePlaybackDevices, rhs: Stremio_Core_Models_LoadablePlaybackDevices) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LoadableStatistics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadableStatistics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "loading"),
    2: .same(proto: "error"),
    3: .same(proto: "ready"),
  ]

  public var isInitialized: Bool {
    if let v = self.content, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Stremio_Core_Models_Loading?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .loading(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .loading(v)
        }
      }()
      case 2: try {
        var v: Stremio_Core_Models_Error?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .error(v)
        }
      }()
      case 3: try {
        var v: Stremio_Core_Models_StreamingServer.Statistics?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .ready(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .ready(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.content {
    case .loading?: try {
      guard case .loading(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .ready?: try {
      guard case .ready(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LoadableStatistics, rhs: Stremio_Core_Models_LoadableStatistics) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_PlaybackDevices: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaybackDevices"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "devices"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.devices) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.devices) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.devices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.devices, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_PlaybackDevices, rhs: Stremio_Core_Models_PlaybackDevices) -> Bool {
    if lhs.devices != rhs.devices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
