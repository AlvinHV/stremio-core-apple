// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stremio/core/models/library_by_type.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Stremio_Core_Models_LibraryByType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var selected: Stremio_Core_Models_LibraryByType.Selected {
    get {return _selected ?? Stremio_Core_Models_LibraryByType.Selected()}
    set {_selected = newValue}
  }
  /// Returns true if `selected` has been explicitly set.
  public var hasSelected: Bool {return self._selected != nil}
  /// Clears the value of `selected`. Subsequent reads from it will return its default value.
  public mutating func clearSelected() {self._selected = nil}

  public var selectable: Stremio_Core_Models_LibraryByType.Selectable {
    get {return _selectable ?? Stremio_Core_Models_LibraryByType.Selectable()}
    set {_selectable = newValue}
  }
  /// Returns true if `selectable` has been explicitly set.
  public var hasSelectable: Bool {return self._selectable != nil}
  /// Clears the value of `selectable`. Subsequent reads from it will return its default value.
  public mutating func clearSelectable() {self._selectable = nil}

  public var catalogs: [Stremio_Core_Models_LibraryCatalog] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Selected {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var sort: Stremio_Core_Models_LibraryWithFilters.Sort {
      get {return _sort ?? .lastWatched}
      set {_sort = newValue}
    }
    /// Returns true if `sort` has been explicitly set.
    public var hasSort: Bool {return self._sort != nil}
    /// Clears the value of `sort`. Subsequent reads from it will return its default value.
    public mutating func clearSort() {self._sort = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _sort: Stremio_Core_Models_LibraryWithFilters.Sort? = nil
  }

  public struct Selectable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var sorts: [Stremio_Core_Models_LibraryByType.SelectableSort] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct SelectableSort {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var sort: Stremio_Core_Models_LibraryWithFilters.Sort {
      get {return _sort ?? .lastWatched}
      set {_sort = newValue}
    }
    /// Returns true if `sort` has been explicitly set.
    public var hasSort: Bool {return self._sort != nil}
    /// Clears the value of `sort`. Subsequent reads from it will return its default value.
    public mutating func clearSort() {self._sort = nil}

    public var selected: Bool {
      get {return _selected ?? false}
      set {_selected = newValue}
    }
    /// Returns true if `selected` has been explicitly set.
    public var hasSelected: Bool {return self._selected != nil}
    /// Clears the value of `selected`. Subsequent reads from it will return its default value.
    public mutating func clearSelected() {self._selected = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _sort: Stremio_Core_Models_LibraryWithFilters.Sort? = nil
    fileprivate var _selected: Bool? = nil
  }

  public init() {}

  fileprivate var _selected: Stremio_Core_Models_LibraryByType.Selected? = nil
  fileprivate var _selectable: Stremio_Core_Models_LibraryByType.Selectable? = nil
}

public struct Stremio_Core_Models_LibraryCatalog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: String {
    get {return _type ?? String()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {self._type = nil}

  public var items: [Stremio_Core_Types_LibraryItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _type: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stremio_Core_Models_LibraryByType: @unchecked Sendable {}
extension Stremio_Core_Models_LibraryByType.Selected: @unchecked Sendable {}
extension Stremio_Core_Models_LibraryByType.Selectable: @unchecked Sendable {}
extension Stremio_Core_Models_LibraryByType.SelectableSort: @unchecked Sendable {}
extension Stremio_Core_Models_LibraryCatalog: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stremio.core.models"

extension Stremio_Core_Models_LibraryByType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LibraryByType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "selected"),
    2: .same(proto: "selectable"),
    3: .same(proto: "catalogs"),
  ]

  public var isInitialized: Bool {
    if self._selectable == nil {return false}
    if let v = self._selected, !v.isInitialized {return false}
    if let v = self._selectable, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.catalogs) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._selected) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._selectable) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.catalogs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._selected {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._selectable {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.catalogs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.catalogs, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LibraryByType, rhs: Stremio_Core_Models_LibraryByType) -> Bool {
    if lhs._selected != rhs._selected {return false}
    if lhs._selectable != rhs._selectable {return false}
    if lhs.catalogs != rhs.catalogs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LibraryByType.Selected: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_LibraryByType.protoMessageName + ".Selected"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sort"),
  ]

  public var isInitialized: Bool {
    if self._sort == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._sort) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sort {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LibraryByType.Selected, rhs: Stremio_Core_Models_LibraryByType.Selected) -> Bool {
    if lhs._sort != rhs._sort {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LibraryByType.Selectable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_LibraryByType.protoMessageName + ".Selectable"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sorts"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.sorts) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.sorts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sorts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sorts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LibraryByType.Selectable, rhs: Stremio_Core_Models_LibraryByType.Selectable) -> Bool {
    if lhs.sorts != rhs.sorts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LibraryByType.SelectableSort: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_LibraryByType.protoMessageName + ".SelectableSort"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sort"),
    2: .same(proto: "selected"),
  ]

  public var isInitialized: Bool {
    if self._sort == nil {return false}
    if self._selected == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._sort) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._selected) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sort {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._selected {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LibraryByType.SelectableSort, rhs: Stremio_Core_Models_LibraryByType.SelectableSort) -> Bool {
    if lhs._sort != rhs._sort {return false}
    if lhs._selected != rhs._selected {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LibraryCatalog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LibraryCatalog"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "items"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.items) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._type) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LibraryCatalog, rhs: Stremio_Core_Models_LibraryCatalog) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
