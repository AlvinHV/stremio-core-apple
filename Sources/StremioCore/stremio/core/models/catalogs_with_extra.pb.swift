// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stremio/core/models/catalogs_with_extra.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Stremio_Core_Models_CatalogsWithExtra {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var selected: Stremio_Core_Models_CatalogsWithExtra.Selected {
    get {return _selected ?? Stremio_Core_Models_CatalogsWithExtra.Selected()}
    set {_selected = newValue}
  }
  /// Returns true if `selected` has been explicitly set.
  public var hasSelected: Bool {return self._selected != nil}
  /// Clears the value of `selected`. Subsequent reads from it will return its default value.
  public mutating func clearSelected() {self._selected = nil}

  public var catalogs: [Stremio_Core_Models_Catalog] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Selected {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: String {
      get {return _type ?? String()}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    public mutating func clearType() {self._type = nil}

    public var extra: [Stremio_Core_Types_ExtraValue] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _type: String? = nil
  }

  public init() {}

  fileprivate var _selected: Stremio_Core_Models_CatalogsWithExtra.Selected? = nil
}

public struct Stremio_Core_Models_Catalog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pages: [Stremio_Core_Models_LoadablePage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Stremio_Core_Models_LoadablePage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  public var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  public mutating func clearTitle() {self._title = nil}

  public var request: Stremio_Core_Types_ResourceRequest {
    get {return _request ?? Stremio_Core_Types_ResourceRequest()}
    set {_request = newValue}
  }
  /// Returns true if `request` has been explicitly set.
  public var hasRequest: Bool {return self._request != nil}
  /// Clears the value of `request`. Subsequent reads from it will return its default value.
  public mutating func clearRequest() {self._request = nil}

  public var content: Stremio_Core_Models_LoadablePage.OneOf_Content? = nil

  public var loading: Stremio_Core_Models_Loading {
    get {
      if case .loading(let v)? = content {return v}
      return Stremio_Core_Models_Loading()
    }
    set {content = .loading(newValue)}
  }

  public var error: Stremio_Core_Models_Error {
    get {
      if case .error(let v)? = content {return v}
      return Stremio_Core_Models_Error()
    }
    set {content = .error(newValue)}
  }

  public var ready: Stremio_Core_Models_Page {
    get {
      if case .ready(let v)? = content {return v}
      return Stremio_Core_Models_Page()
    }
    set {content = .ready(newValue)}
  }

  public var deepLinks: Stremio_Core_Models_DiscoverDeepLinks {
    get {return _deepLinks ?? Stremio_Core_Models_DiscoverDeepLinks()}
    set {_deepLinks = newValue}
  }
  /// Returns true if `deepLinks` has been explicitly set.
  public var hasDeepLinks: Bool {return self._deepLinks != nil}
  /// Clears the value of `deepLinks`. Subsequent reads from it will return its default value.
  public mutating func clearDeepLinks() {self._deepLinks = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Content: Equatable {
    case loading(Stremio_Core_Models_Loading)
    case error(Stremio_Core_Models_Error)
    case ready(Stremio_Core_Models_Page)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .error: return {
        guard case .error(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .ready: return {
        guard case .ready(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      default: return true
      }
    }

  #if !swift(>=4.1)
    public static func ==(lhs: Stremio_Core_Models_LoadablePage.OneOf_Content, rhs: Stremio_Core_Models_LoadablePage.OneOf_Content) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.loading, .loading): return {
        guard case .loading(let l) = lhs, case .loading(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ready, .ready): return {
        guard case .ready(let l) = lhs, case .ready(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _title: String? = nil
  fileprivate var _request: Stremio_Core_Types_ResourceRequest? = nil
  fileprivate var _deepLinks: Stremio_Core_Models_DiscoverDeepLinks? = nil
}

public struct Stremio_Core_Models_Page {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var metaItems: [Stremio_Core_Types_MetaItemPreview] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Stremio_Core_Models_DiscoverDeepLinks {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var discover: String {
    get {return _discover ?? String()}
    set {_discover = newValue}
  }
  /// Returns true if `discover` has been explicitly set.
  public var hasDiscover: Bool {return self._discover != nil}
  /// Clears the value of `discover`. Subsequent reads from it will return its default value.
  public mutating func clearDiscover() {self._discover = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _discover: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stremio_Core_Models_CatalogsWithExtra: @unchecked Sendable {}
extension Stremio_Core_Models_CatalogsWithExtra.Selected: @unchecked Sendable {}
extension Stremio_Core_Models_Catalog: @unchecked Sendable {}
extension Stremio_Core_Models_LoadablePage: @unchecked Sendable {}
extension Stremio_Core_Models_LoadablePage.OneOf_Content: @unchecked Sendable {}
extension Stremio_Core_Models_Page: @unchecked Sendable {}
extension Stremio_Core_Models_DiscoverDeepLinks: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stremio.core.models"

extension Stremio_Core_Models_CatalogsWithExtra: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CatalogsWithExtra"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "selected"),
    2: .same(proto: "catalogs"),
  ]

  public var isInitialized: Bool {
    if let v = self._selected, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.catalogs) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._selected) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.catalogs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._selected {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.catalogs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.catalogs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_CatalogsWithExtra, rhs: Stremio_Core_Models_CatalogsWithExtra) -> Bool {
    if lhs._selected != rhs._selected {return false}
    if lhs.catalogs != rhs.catalogs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_CatalogsWithExtra.Selected: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_CatalogsWithExtra.protoMessageName + ".Selected"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "extra"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.extra) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._type) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.extra) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.extra.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.extra, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_CatalogsWithExtra.Selected, rhs: Stremio_Core_Models_CatalogsWithExtra.Selected) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs.extra != rhs.extra {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_Catalog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Catalog"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "pages"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.pages) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.pages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pages, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_Catalog, rhs: Stremio_Core_Models_Catalog) -> Bool {
    if lhs.pages != rhs.pages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LoadablePage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadablePage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "request"),
    3: .same(proto: "loading"),
    4: .same(proto: "error"),
    5: .same(proto: "ready"),
    6: .standard(proto: "deep_links"),
  ]

  public var isInitialized: Bool {
    if self._title == nil {return false}
    if self._request == nil {return false}
    if self._deepLinks == nil {return false}
    if let v = self._request, !v.isInitialized {return false}
    if let v = self.content, !v.isInitialized {return false}
    if let v = self._deepLinks, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._request) }()
      case 3: try {
        var v: Stremio_Core_Models_Loading?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .loading(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .loading(v)
        }
      }()
      case 4: try {
        var v: Stremio_Core_Models_Error?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .error(v)
        }
      }()
      case 5: try {
        var v: Stremio_Core_Models_Page?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .ready(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .ready(v)
        }
      }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._deepLinks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._request {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    switch self.content {
    case .loading?: try {
      guard case .loading(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .error?: try {
      guard case .error(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .ready?: try {
      guard case .ready(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try { if let v = self._deepLinks {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LoadablePage, rhs: Stremio_Core_Models_LoadablePage) -> Bool {
    if lhs._title != rhs._title {return false}
    if lhs._request != rhs._request {return false}
    if lhs.content != rhs.content {return false}
    if lhs._deepLinks != rhs._deepLinks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_Page: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Page"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "meta_items"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.metaItems) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.metaItems) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.metaItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metaItems, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_Page, rhs: Stremio_Core_Models_Page) -> Bool {
    if lhs.metaItems != rhs.metaItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_DiscoverDeepLinks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DiscoverDeepLinks"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "discover"),
  ]

  public var isInitialized: Bool {
    if self._discover == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._discover) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._discover {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_DiscoverDeepLinks, rhs: Stremio_Core_Models_DiscoverDeepLinks) -> Bool {
    if lhs._discover != rhs._discover {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
