// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stremio/core/models/link.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Stremio_Core_Models_AuthLink {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Stremio_Core_Models_LoadableCode {
    get {return _code ?? Stremio_Core_Models_LoadableCode()}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  public var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  public mutating func clearCode() {self._code = nil}

  public var data: Stremio_Core_Models_LoadableAuthKey {
    get {return _data ?? Stremio_Core_Models_LoadableAuthKey()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _code: Stremio_Core_Models_LoadableCode? = nil
  fileprivate var _data: Stremio_Core_Models_LoadableAuthKey? = nil
}

public struct Stremio_Core_Models_LoadableCode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: Stremio_Core_Models_LoadableCode.OneOf_Content? = nil

  public var loading: Stremio_Core_Models_Loading {
    get {
      if case .loading(let v)? = content {return v}
      return Stremio_Core_Models_Loading()
    }
    set {content = .loading(newValue)}
  }

  public var error: Stremio_Core_Models_Error {
    get {
      if case .error(let v)? = content {return v}
      return Stremio_Core_Models_Error()
    }
    set {content = .error(newValue)}
  }

  public var ready: Stremio_Core_Types_LinkCodeResponse {
    get {
      if case .ready(let v)? = content {return v}
      return Stremio_Core_Types_LinkCodeResponse()
    }
    set {content = .ready(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Content: Equatable {
    case loading(Stremio_Core_Models_Loading)
    case error(Stremio_Core_Models_Error)
    case ready(Stremio_Core_Types_LinkCodeResponse)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .error: return {
        guard case .error(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .ready: return {
        guard case .ready(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      default: return true
      }
    }

  #if !swift(>=4.1)
    public static func ==(lhs: Stremio_Core_Models_LoadableCode.OneOf_Content, rhs: Stremio_Core_Models_LoadableCode.OneOf_Content) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.loading, .loading): return {
        guard case .loading(let l) = lhs, case .loading(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ready, .ready): return {
        guard case .ready(let l) = lhs, case .ready(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Stremio_Core_Models_LoadableAuthKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: Stremio_Core_Models_LoadableAuthKey.OneOf_Content? = nil

  public var loading: Stremio_Core_Models_Loading {
    get {
      if case .loading(let v)? = content {return v}
      return Stremio_Core_Models_Loading()
    }
    set {content = .loading(newValue)}
  }

  public var error: Stremio_Core_Models_Error {
    get {
      if case .error(let v)? = content {return v}
      return Stremio_Core_Models_Error()
    }
    set {content = .error(newValue)}
  }

  public var ready: Stremio_Core_Types_LinkAuthKey {
    get {
      if case .ready(let v)? = content {return v}
      return Stremio_Core_Types_LinkAuthKey()
    }
    set {content = .ready(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Content: Equatable {
    case loading(Stremio_Core_Models_Loading)
    case error(Stremio_Core_Models_Error)
    case ready(Stremio_Core_Types_LinkAuthKey)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .error: return {
        guard case .error(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .ready: return {
        guard case .ready(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      default: return true
      }
    }

  #if !swift(>=4.1)
    public static func ==(lhs: Stremio_Core_Models_LoadableAuthKey.OneOf_Content, rhs: Stremio_Core_Models_LoadableAuthKey.OneOf_Content) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.loading, .loading): return {
        guard case .loading(let l) = lhs, case .loading(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ready, .ready): return {
        guard case .ready(let l) = lhs, case .ready(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stremio_Core_Models_AuthLink: @unchecked Sendable {}
extension Stremio_Core_Models_LoadableCode: @unchecked Sendable {}
extension Stremio_Core_Models_LoadableCode.OneOf_Content: @unchecked Sendable {}
extension Stremio_Core_Models_LoadableAuthKey: @unchecked Sendable {}
extension Stremio_Core_Models_LoadableAuthKey.OneOf_Content: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stremio.core.models"

extension Stremio_Core_Models_AuthLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthLink"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "data"),
  ]

  public var isInitialized: Bool {
    if let v = self._code, !v.isInitialized {return false}
    if let v = self._data, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._code) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._code {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_AuthLink, rhs: Stremio_Core_Models_AuthLink) -> Bool {
    if lhs._code != rhs._code {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LoadableCode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadableCode"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "loading"),
    2: .same(proto: "error"),
    3: .same(proto: "ready"),
  ]

  public var isInitialized: Bool {
    if let v = self.content, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Stremio_Core_Models_Loading?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .loading(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .loading(v)
        }
      }()
      case 2: try {
        var v: Stremio_Core_Models_Error?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .error(v)
        }
      }()
      case 3: try {
        var v: Stremio_Core_Types_LinkCodeResponse?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .ready(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .ready(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.content {
    case .loading?: try {
      guard case .loading(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .ready?: try {
      guard case .ready(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LoadableCode, rhs: Stremio_Core_Models_LoadableCode) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LoadableAuthKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadableAuthKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "loading"),
    2: .same(proto: "error"),
    3: .same(proto: "ready"),
  ]

  public var isInitialized: Bool {
    if let v = self.content, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Stremio_Core_Models_Loading?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .loading(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .loading(v)
        }
      }()
      case 2: try {
        var v: Stremio_Core_Models_Error?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .error(v)
        }
      }()
      case 3: try {
        var v: Stremio_Core_Types_LinkAuthKey?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .ready(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .ready(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.content {
    case .loading?: try {
      guard case .loading(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .ready?: try {
      guard case .ready(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LoadableAuthKey, rhs: Stremio_Core_Models_LoadableAuthKey) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
