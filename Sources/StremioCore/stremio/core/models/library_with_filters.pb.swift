// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stremio/core/models/library_with_filters.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Stremio_Core_Models_LibraryWithFilters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var selected: Stremio_Core_Models_LibraryWithFilters.Selected {
    get {return _selected ?? Stremio_Core_Models_LibraryWithFilters.Selected()}
    set {_selected = newValue}
  }
  /// Returns true if `selected` has been explicitly set.
  public var hasSelected: Bool {return self._selected != nil}
  /// Clears the value of `selected`. Subsequent reads from it will return its default value.
  public mutating func clearSelected() {self._selected = nil}

  public var selectable: Stremio_Core_Models_LibraryWithFilters.Selectable {
    get {return _selectable ?? Stremio_Core_Models_LibraryWithFilters.Selectable()}
    set {_selectable = newValue}
  }
  /// Returns true if `selectable` has been explicitly set.
  public var hasSelectable: Bool {return self._selectable != nil}
  /// Clears the value of `selectable`. Subsequent reads from it will return its default value.
  public mutating func clearSelectable() {self._selectable = nil}

  public var catalog: [Stremio_Core_Types_LibraryItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Sort: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case lastWatched // = 0
    case name // = 1
    case nameReverse // = 2
    case timesWatched // = 3
    case watched // = 4
    case notWatched // = 5

    public init() {
      self = .lastWatched
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .lastWatched
      case 1: self = .name
      case 2: self = .nameReverse
      case 3: self = .timesWatched
      case 4: self = .watched
      case 5: self = .notWatched
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .lastWatched: return 0
      case .name: return 1
      case .nameReverse: return 2
      case .timesWatched: return 3
      case .watched: return 4
      case .notWatched: return 5
      }
    }

  }

  public struct Selected {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var request: Stremio_Core_Models_LibraryWithFilters.LibraryRequest {
      get {return _request ?? Stremio_Core_Models_LibraryWithFilters.LibraryRequest()}
      set {_request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return self._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {self._request = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _request: Stremio_Core_Models_LibraryWithFilters.LibraryRequest? = nil
  }

  public struct LibraryRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: String {
      get {return _type ?? String()}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    public mutating func clearType() {self._type = nil}

    public var sort: Stremio_Core_Models_LibraryWithFilters.Sort {
      get {return _sort ?? .lastWatched}
      set {_sort = newValue}
    }
    /// Returns true if `sort` has been explicitly set.
    public var hasSort: Bool {return self._sort != nil}
    /// Clears the value of `sort`. Subsequent reads from it will return its default value.
    public mutating func clearSort() {self._sort = nil}

    public var page: Int64 {
      get {return _page ?? 0}
      set {_page = newValue}
    }
    /// Returns true if `page` has been explicitly set.
    public var hasPage: Bool {return self._page != nil}
    /// Clears the value of `page`. Subsequent reads from it will return its default value.
    public mutating func clearPage() {self._page = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _type: String? = nil
    fileprivate var _sort: Stremio_Core_Models_LibraryWithFilters.Sort? = nil
    fileprivate var _page: Int64? = nil
  }

  public struct Selectable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var types: [Stremio_Core_Models_LibraryWithFilters.SelectableType] = []

    public var sorts: [Stremio_Core_Models_LibraryWithFilters.SelectableSort] = []

    public var nextPage: Stremio_Core_Models_LibraryWithFilters.SelectablePage {
      get {return _nextPage ?? Stremio_Core_Models_LibraryWithFilters.SelectablePage()}
      set {_nextPage = newValue}
    }
    /// Returns true if `nextPage` has been explicitly set.
    public var hasNextPage: Bool {return self._nextPage != nil}
    /// Clears the value of `nextPage`. Subsequent reads from it will return its default value.
    public mutating func clearNextPage() {self._nextPage = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _nextPage: Stremio_Core_Models_LibraryWithFilters.SelectablePage? = nil
  }

  public struct SelectableType {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: String {
      get {return _type ?? String()}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    public var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    public mutating func clearType() {self._type = nil}

    public var selected: Bool {
      get {return _selected ?? false}
      set {_selected = newValue}
    }
    /// Returns true if `selected` has been explicitly set.
    public var hasSelected: Bool {return self._selected != nil}
    /// Clears the value of `selected`. Subsequent reads from it will return its default value.
    public mutating func clearSelected() {self._selected = nil}

    public var request: Stremio_Core_Models_LibraryWithFilters.LibraryRequest {
      get {return _request ?? Stremio_Core_Models_LibraryWithFilters.LibraryRequest()}
      set {_request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return self._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {self._request = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _type: String? = nil
    fileprivate var _selected: Bool? = nil
    fileprivate var _request: Stremio_Core_Models_LibraryWithFilters.LibraryRequest? = nil
  }

  public struct SelectableSort {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var sort: Stremio_Core_Models_LibraryWithFilters.Sort {
      get {return _sort ?? .lastWatched}
      set {_sort = newValue}
    }
    /// Returns true if `sort` has been explicitly set.
    public var hasSort: Bool {return self._sort != nil}
    /// Clears the value of `sort`. Subsequent reads from it will return its default value.
    public mutating func clearSort() {self._sort = nil}

    public var selected: Bool {
      get {return _selected ?? false}
      set {_selected = newValue}
    }
    /// Returns true if `selected` has been explicitly set.
    public var hasSelected: Bool {return self._selected != nil}
    /// Clears the value of `selected`. Subsequent reads from it will return its default value.
    public mutating func clearSelected() {self._selected = nil}

    public var request: Stremio_Core_Models_LibraryWithFilters.LibraryRequest {
      get {return _request ?? Stremio_Core_Models_LibraryWithFilters.LibraryRequest()}
      set {_request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return self._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {self._request = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _sort: Stremio_Core_Models_LibraryWithFilters.Sort? = nil
    fileprivate var _selected: Bool? = nil
    fileprivate var _request: Stremio_Core_Models_LibraryWithFilters.LibraryRequest? = nil
  }

  public struct SelectablePage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var request: Stremio_Core_Models_LibraryWithFilters.LibraryRequest {
      get {return _request ?? Stremio_Core_Models_LibraryWithFilters.LibraryRequest()}
      set {_request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return self._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {self._request = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _request: Stremio_Core_Models_LibraryWithFilters.LibraryRequest? = nil
  }

  public init() {}

  fileprivate var _selected: Stremio_Core_Models_LibraryWithFilters.Selected? = nil
  fileprivate var _selectable: Stremio_Core_Models_LibraryWithFilters.Selectable? = nil
}

#if swift(>=4.2)

extension Stremio_Core_Models_LibraryWithFilters.Sort: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Stremio_Core_Models_LibraryWithFilters: @unchecked Sendable {}
extension Stremio_Core_Models_LibraryWithFilters.Sort: @unchecked Sendable {}
extension Stremio_Core_Models_LibraryWithFilters.Selected: @unchecked Sendable {}
extension Stremio_Core_Models_LibraryWithFilters.LibraryRequest: @unchecked Sendable {}
extension Stremio_Core_Models_LibraryWithFilters.Selectable: @unchecked Sendable {}
extension Stremio_Core_Models_LibraryWithFilters.SelectableType: @unchecked Sendable {}
extension Stremio_Core_Models_LibraryWithFilters.SelectableSort: @unchecked Sendable {}
extension Stremio_Core_Models_LibraryWithFilters.SelectablePage: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stremio.core.models"

extension Stremio_Core_Models_LibraryWithFilters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LibraryWithFilters"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "selected"),
    2: .same(proto: "selectable"),
    3: .same(proto: "catalog"),
  ]

  public var isInitialized: Bool {
    if self._selectable == nil {return false}
    if let v = self._selected, !v.isInitialized {return false}
    if let v = self._selectable, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.catalog) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._selected) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._selectable) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.catalog) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._selected {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._selectable {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.catalog.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.catalog, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LibraryWithFilters, rhs: Stremio_Core_Models_LibraryWithFilters) -> Bool {
    if lhs._selected != rhs._selected {return false}
    if lhs._selectable != rhs._selectable {return false}
    if lhs.catalog != rhs.catalog {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LibraryWithFilters.Sort: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LastWatched"),
    1: .same(proto: "Name"),
    2: .same(proto: "NameReverse"),
    3: .same(proto: "TimesWatched"),
    4: .same(proto: "Watched"),
    5: .same(proto: "NotWatched"),
  ]
}

extension Stremio_Core_Models_LibraryWithFilters.Selected: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_LibraryWithFilters.protoMessageName + ".Selected"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
  ]

  public var isInitialized: Bool {
    if self._request == nil {return false}
    if let v = self._request, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._request) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._request {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LibraryWithFilters.Selected, rhs: Stremio_Core_Models_LibraryWithFilters.Selected) -> Bool {
    if lhs._request != rhs._request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LibraryWithFilters.LibraryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_LibraryWithFilters.protoMessageName + ".LibraryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "sort"),
    3: .same(proto: "page"),
  ]

  public var isInitialized: Bool {
    if self._sort == nil {return false}
    if self._page == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._sort) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self._page) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._sort {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._page {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LibraryWithFilters.LibraryRequest, rhs: Stremio_Core_Models_LibraryWithFilters.LibraryRequest) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._sort != rhs._sort {return false}
    if lhs._page != rhs._page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LibraryWithFilters.Selectable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_LibraryWithFilters.protoMessageName + ".Selectable"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "types"),
    2: .same(proto: "sorts"),
    3: .standard(proto: "next_page"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.types) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.sorts) {return false}
    if let v = self._nextPage, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.types) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.sorts) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._nextPage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.types.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.types, fieldNumber: 1)
    }
    if !self.sorts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sorts, fieldNumber: 2)
    }
    try { if let v = self._nextPage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LibraryWithFilters.Selectable, rhs: Stremio_Core_Models_LibraryWithFilters.Selectable) -> Bool {
    if lhs.types != rhs.types {return false}
    if lhs.sorts != rhs.sorts {return false}
    if lhs._nextPage != rhs._nextPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LibraryWithFilters.SelectableType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_LibraryWithFilters.protoMessageName + ".SelectableType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "selected"),
    3: .same(proto: "request"),
  ]

  public var isInitialized: Bool {
    if self._selected == nil {return false}
    if self._request == nil {return false}
    if let v = self._request, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._selected) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._request) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._selected {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._request {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LibraryWithFilters.SelectableType, rhs: Stremio_Core_Models_LibraryWithFilters.SelectableType) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._selected != rhs._selected {return false}
    if lhs._request != rhs._request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LibraryWithFilters.SelectableSort: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_LibraryWithFilters.protoMessageName + ".SelectableSort"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sort"),
    2: .same(proto: "selected"),
    3: .same(proto: "request"),
  ]

  public var isInitialized: Bool {
    if self._sort == nil {return false}
    if self._selected == nil {return false}
    if self._request == nil {return false}
    if let v = self._request, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._sort) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._selected) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._request) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sort {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._selected {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._request {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LibraryWithFilters.SelectableSort, rhs: Stremio_Core_Models_LibraryWithFilters.SelectableSort) -> Bool {
    if lhs._sort != rhs._sort {return false}
    if lhs._selected != rhs._selected {return false}
    if lhs._request != rhs._request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stremio_Core_Models_LibraryWithFilters.SelectablePage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Stremio_Core_Models_LibraryWithFilters.protoMessageName + ".SelectablePage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
  ]

  public var isInitialized: Bool {
    if self._request == nil {return false}
    if let v = self._request, !v.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._request) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._request {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Stremio_Core_Models_LibraryWithFilters.SelectablePage, rhs: Stremio_Core_Models_LibraryWithFilters.SelectablePage) -> Bool {
    if lhs._request != rhs._request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
